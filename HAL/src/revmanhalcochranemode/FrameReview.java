/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package revmanhalcochranemode;

import static com.sun.org.apache.regexp.internal.RETest.test;
import java.awt.Desktop;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.IOException; 
import java.nio.channels.FileChannel; 
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Vector;
import org.w3c.dom.NodeList;

/**
 *
 * @author msabs1
 */
public class FrameReview extends javax.swing.JFrame {

    private String revMan;
    private String csv;
    private String grade;
    private Vector vScales = new Vector();
    private Vector vExportedCsv = new Vector();
    private Element subsectionSub;
    private Element subsectionSub1;
    private Element subsectionSub2;
    private Element subsectionSub3;
    
    private int counterSubpoint1=1;
    private int counterSubpoint2=1;
    private int counterSubpoint3=1;
    private int counterSubpoint4=1;
    
    private int counterGeneral=0;
    
    private int counterFirstPoint1=1;
    private int counterFirstPoint2=1;
    private int counterFirstPoint3=1;
    private int counterFirstPoint4=1;
    
    
    private boolean lastEntry=false;
    private boolean firstTime = true;
    private boolean firstTime1 = true;
    private boolean firstTime2 = true;
    private boolean firstTime3 = true;
    private boolean nameScale = false;
    private boolean abbr = false;
    
    /**
     * Creates new form StartFormNew3
     */
    public FrameReview(String revFile, String csvFile, String grFile) {
        initComponents();
        this.setSize(800,700);
        this.setLocation(200,150);
        revMan = revFile;
        csv = csvFile;
        grade = grFile;
        this.readScales();
        this.readExportedCSV();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 200), new java.awt.Dimension(0, 200), new java.awt.Dimension(32767, 200));
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        box_style = new javax.swing.JComboBox();
        cbResultOfSearch = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        cbLanguage = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbDescription = new javax.swing.JCheckBox();
        cbResult = new javax.swing.JCheckBox();
        cbEffects = new javax.swing.JCheckBox();
        cbAbstract = new javax.swing.JCheckBox();
        cbSelectAll = new javax.swing.JCheckBox();
        cbDiscussion = new javax.swing.JCheckBox();
        btn_exit = new javax.swing.JButton();
        btn_start = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 32)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("RevMan HAL:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 230, 50);
        getContentPane().add(filler1);
        filler1.setBounds(430, 10, 0, 130);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/hal.png"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("3.) Please choose way of modification");

        box_style.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        box_style.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. Full text (excludes fixed/random label)", "2. Full text (includes fixed/random label)", "3. As number 2 and incl. individual studies", "4. Simple - just numbers" }));

        cbResultOfSearch.setBackground(new java.awt.Color(247, 247, 247));
        cbResultOfSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbResultOfSearch.setText("add 'results of search'");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 33)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 249));
        jLabel2.setText("Cochrane Mode");

        cbLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "German" }));
        cbLanguage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbLanguageItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("4. ) Please choose your language");

        jLabel8.setText("Explanation");
        jLabel8.setToolTipText("");

        cbDescription.setBackground(new java.awt.Color(247, 247, 247));
        cbDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbDescription.setText("add 'Description of Included Studies'");

        cbResult.setBackground(new java.awt.Color(247, 247, 247));
        cbResult.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbResult.setText("add Results");

        cbEffects.setBackground(new java.awt.Color(247, 247, 247));
        cbEffects.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbEffects.setText("add 'Effects of Intervention'");

        cbAbstract.setBackground(new java.awt.Color(247, 247, 247));
        cbAbstract.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbAbstract.setText("add Abstract");

        cbSelectAll.setBackground(new java.awt.Color(247, 247, 247));
        cbSelectAll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbSelectAll.setText("select All");

        cbDiscussion.setBackground(new java.awt.Color(247, 247, 247));
        cbDiscussion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbDiscussion.setText("add Discussion");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(66, 66, 66))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(box_style, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbAbstract)
                                    .addComponent(cbResult)
                                    .addComponent(cbDiscussion)
                                    .addComponent(cbSelectAll))
                                .addGap(176, 176, 176))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cbDescription)
                                .addComponent(cbResultOfSearch)
                                .addComponent(cbEffects)))
                        .addGap(29, 29, 29))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(box_style, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSelectAll)
                        .addGap(47, 47, 47)
                        .addComponent(cbAbstract)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbResult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbResultOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbEffects)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbDiscussion)
                        .addContainerGap(77, Short.MAX_VALUE))))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 10, 750, 510);

        btn_exit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_exit.setForeground(new java.awt.Color(0, 102, 0));
        btn_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/exit.png"))); // NOI18N
        btn_exit.setText("EXIT");
        btn_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_exitMouseClicked(evt);
            }
        });
        getContentPane().add(btn_exit);
        btn_exit.setBounds(550, 530, 131, 50);

        btn_start.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_start.setForeground(new java.awt.Color(0, 153, 51));
        btn_start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/start.png"))); // NOI18N
        btn_start.setText("   GO!");
        btn_start.setToolTipText("This will also create a backup rm5-file in same directory.");
        btn_start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_startMouseClicked(evt);
            }
        });
        getContentPane().add(btn_start);
        btn_start.setBounds(290, 530, 115, 47);

        btn_back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_back.setForeground(new java.awt.Color(153, 0, 0));
        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/back.png"))); // NOI18N
        btn_back.setText("  BACK");
        btn_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_backMouseClicked(evt);
            }
        });
        getContentPane().add(btn_back);
        btn_back.setBounds(30, 530, 131, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backMouseClicked
        this.dispose();
        FrameStart start = new FrameStart();
        start.setVisible(true);
        start.validate();
    }//GEN-LAST:event_btn_backMouseClicked

    private void btn_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_exitMouseClicked
        int resultBeenden = JOptionPane.showConfirmDialog(this, "Do you really want to end the program?", "EXIT", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (resultBeenden==JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btn_exitMouseClicked

    private void btn_startMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_startMouseClicked
       
        String language = (String)cbLanguage.getSelectedItem();      
       
        System.out.println("in startform: "+language);
               
        try{
            int style = box_style.getSelectedIndex();            
            
            String csvFile = csv;
            String gradeFile = grade;
            String revManFile =  revMan;

            if (revManFile.equals("") || !revManFile.substring(revManFile.indexOf(".")).equals(".rm5")){
                JOptionPane.showMessageDialog(this, "Please choose a valid RevMan file (.rm5)", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            if (csvFile.equals("")|| !csvFile.substring(csvFile.indexOf(".")).equals(".csv")){
                JOptionPane.showMessageDialog(this, "Please choose a valid .csv file", "Warning", JOptionPane.WARNING_MESSAGE);
            }

            if (!revManFile.equals("") && !csvFile.equals(""))
            {

                File inF = new File(revManFile);
                File outF = new File(revManFile.substring(0,revManFile.indexOf("."))+"_Backup.rm5");
                copyFile(inF, outF);

                RemoveResults rmRs = new RemoveResults();
                if (rmRs.main(revManFile) == false) 
                {
                    JOptionPane.showMessageDialog(this, "An Error occured 1. Result section could not be deleted but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                if (style == 0)  // Complex #1 was chosen
                {   
                    Complex1 c1 = new Complex1(language);
                    
                    this.writeChecked(language, revManFile, csvFile, c1, null, null, null);

                    
                    
                   
                }
                
                else if(style == 1) // Complex #2 was chosen
                {     
                    Complex2 c2 = new Complex2();
                    this.writeChecked(language, revManFile, csvFile, null, c2, null, null);
                    
                }
                else if(style == 2) // Complex #2 - incl. Studies was chosen
                {     
                    Complex2_Studies c2withSt = new Complex2_Studies();
                    this.writeChecked(language, revManFile, csvFile, null, null, c2withSt, null);
                }
                else if (style == 3) 
                {    // Simple was chosen
                    Simple simpl = new Simple();
                    this.writeChecked(language, revManFile, csvFile, null, null, null, simpl);
                }               

            }
        } catch (Exception e){
            System.out.println(e);
            e.printStackTrace();

        }
    }//GEN-LAST:event_btn_startMouseClicked

    private void cbLanguageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbLanguageItemStateChanged
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_cbLanguageItemStateChanged

      
    public void readScales()
    {
     try        
        {           

                    StringBuffer sbAllText = new StringBuffer();

                    String pathCSV = System.getProperty("user.dir");
                                      

                  //  pathCSV = pathCSV +"\\drugDataNewCSVWithSpace.csv";  //for final version!!!!
                    
                    pathCSV = pathCSV +"\\src\\revmanhalcochranemode\\drugsScalesConditionsReferencesCSV.csv"; 
                    
                    System.out.println("das ist pfad "+pathCSV);
                    BufferedReader br = new BufferedReader(new FileReader(pathCSV));

                    int counter = 0;
                    String newLine = br.readLine();

                    while(newLine!=null)
                    {
                        sbAllText.append(newLine);
                        System.out.println("line: "+counter+" "+newLine);
                        counter = counter+1;
                        newLine = br.readLine();
                    }

                    String [] arSpreadSheet = sbAllText.toString().split(";");
                    System.out.println("DJANGO " + counter);
                    br.close();
                    
                    
                    counter = 0;
                    
                    for(int i=0;i<arSpreadSheet.length;i++)
                    {
                        if(arSpreadSheet[i].equalsIgnoreCase("id-ref"))
                        {
                            
                            for(int j=i;j<arSpreadSheet.length;j++)
                            {
                                counter=counter+1;
                                System.out.println("scale nr: "+j+" "+arSpreadSheet[j]);
                                
                               vScales.addElement(arSpreadSheet[j]);
                               
                               if(counter==22)
                               {
                                   j = j+13;  
                                   counter=0;
                               }
                             }
                        }
                    }
                    
    
    }
     catch(Exception e)
     {
         e.printStackTrace();
     }
 
  }
    
    
     public void readExportedCSV()    
     {
         try
         {
                    FileReader fr = new FileReader(csv);
                    BufferedReader br = new BufferedReader(fr);                    
                    String line = br.readLine();
                    
                    String [] arr = line.split(";");
                        if (arr.length != 46) 
                        {
                        JOptionPane.showMessageDialog(this, "Chosen file has not the suitable structure: number of colums are not matching. Please export it again or choose another file.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else
                        {
                            vExportedCsv.addElement(line);
                            while((line=br.readLine())!= null)
                            {
                         
                                    vExportedCsv.addElement(line);
                       
                            }
                        }
                     
                     br.close();
                     fr.close();
                    }
                   
                
            
        
        catch (Exception e) 
        {

        }
     
  
     }
    
     
     public void writeChecked(String language,String revManFile,String csvFile,Complex1 compl1,Complex2 compl2, Complex2_Studies compl2Studies, Simple simpl)
     {
       
         if(cbSelectAll.isSelected()) //SELECT ALL!
         {
             
         }         
                    
         
        
                 
         
         else if (cbResultOfSearch.isSelected() && cbDiscussion.isSelected())     // Result of Search + Discussion                    
         {
                        SOFDiscussion rs = new SOFDiscussion(language);                        
                       
                        
                        if (rs.Main(revManFile) == true && compl1.main(revManFile,csvFile) == true) 
                        {
                            
                            JOptionPane.showMessageDialog(this, "The file was modified 1 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else 
                        {
                            JOptionPane.showMessageDialog(this, "An Error occured 2. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    
         }
         
         else if (cbResultOfSearch.isSelected() && cbDescription.isSelected())     // Result of Search + Description                   
         {                        
                    
         }
         else if (cbResultOfSearch.isSelected() && cbEffects.isSelected())     // Result of Search + Effects                   
         {
                 
             SearchResults rs = new SearchResults(language);    
         System.out.println("in else if in method: "+compl1.toString());
             
              if (compl1 != null)                         
              {                            
                           
                  if (compl1.main(revManFile, csvFile) == true && rs.main(revManFile) == true)
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4.1 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } 
                        else if (compl2 != null) 
                        {                            
                            if (compl2.main(revManFile, csvFile) == true && rs.main(revManFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4.2 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } 
                        else if (compl2Studies != null) 
                        {                            
                            if (compl2Studies.main(revManFile, csvFile) == true && rs.main(revManFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4.3 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } 
                        else if (simpl != null) 
                        {                            
                            if (simpl.main(revManFile, csvFile) == true && rs.main(revManFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4.4 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
         
                        
                        }  
         }
         else if (cbEffects.isSelected() && cbDescription.isSelected())     // Effects + Description                   
         {                        
                    
         }
         else if (cbEffects.isSelected() && cbDiscussion.isSelected())     // Effects + Discussion                   
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbDescription.isSelected())     // Discussion + Description                  
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected())     // Discussion + Abstract                 
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbDescription.isSelected())     // Abstract + Description                   
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbResultOfSearch.isSelected())     // Abstract + ResultOfSearch                   
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbEffects.isSelected())     // Abstract + Effects                   
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbResult.isSelected())     // Discussion + Result (All points of Result)                 
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbResult.isSelected())     // Abstract + Result (All points of Result)                 
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbDescription.isSelected()&&cbEffects.isSelected())     // Discussion + Description + Effects                  
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbEffects.isSelected()&&cbResultOfSearch.isSelected())     // Discussion + Effects + Result of Search               
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbDescription.isSelected()&&cbResultOfSearch.isSelected())     // Discussion + Description + Result of Search               
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbDescription.isSelected()&&cbEffects.isSelected())     // Abstract + Description + Effects                  
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbEffects.isSelected()&&cbResultOfSearch.isSelected())     // Abstract + Effects + Result of Search               
         {                        
                    
         }
         else if (cbAbstract.isSelected() && cbDescription.isSelected()&&cbResultOfSearch.isSelected())     // Abstract + Description + Result of Search               
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbResultOfSearch.isSelected())     // Discussion + Abstract + Result of Search               
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbDescription.isSelected())     // Discussion + Abstract + Description          
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbEffects.isSelected())     // Discussion + Abstract + Effects          
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbDescription.isSelected()&&cbResultOfSearch.isSelected())     
// Discussion + Abstract + Description + ResultOfSearch         
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbDescription.isSelected()&&cbEffects.isSelected())     
// Discussion + Abstract + Description + Effects         
         {                        
                    
         }
         else if (cbDiscussion.isSelected() && cbAbstract.isSelected()&&cbEffects.isSelected()&&cbResultOfSearch.isSelected())     
// Discussion + Abstract + Effects + ResultOfSearch         
         {                        
                    
         }
          else if (cbResultOfSearch.isSelected()) //just Result of Search
                    {
                        SearchResults rs = new SearchResults(language);                        
                        
                        if (rs.main(revManFile) == true) 
                        {
                            JOptionPane.showMessageDialog(this, "The file was modified 2 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else 
                        {
                            System.out.println(rs.main(revManFile));
                            JOptionPane.showMessageDialog(this, "An Error occured 3. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
         else if (cbDiscussion.isSelected()) //just Discussion
                    {
                        
                        SOFDiscussion sd = new SOFDiscussion(language);
                        
                        if (sd.Main(revManFile) == true) {
                            JOptionPane.showMessageDialog(this, "The file was modified 3 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else {
                            JOptionPane.showMessageDialog(this, "An Error occured 4. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                    
         else if (cbEffects.isSelected()) //just Effects of Intervention
                    {
                        if (compl1 != null) 
                        {                            
                            if (compl1.main(revManFile, csvFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } 
                        else if (compl2 != null) 
                        {                            
                            if (compl2.main(revManFile, csvFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } 
                        else if (compl2Studies != null) 
                        {                            
                            if (compl2Studies.main(revManFile, csvFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else if (simpl != null) 
                        {                            
                            if (simpl.main(revManFile, csvFile) == true) 
                            {
                                JOptionPane.showMessageDialog(this, "The file was modified 4 and saved successfully!\n PLEASE NOTE: Text will NOT appear until the review is closed and reopened.", "Action complete", JOptionPane.INFORMATION_MESSAGE);
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(this, "An Error occured 5. File could not be modified correctly but a backup file was created.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }   
                       
                    }
                    
         else if (cbAbstract.isSelected())  // just Abstract                    
         {
                        // Complex1 compl1 = new Complex1(language); blaba lba llb
                    
         }
         
         else if (cbDescription.isSelected()) //just Description
         {
              this.addDescription();
         }
              
         else if(cbResult.isSelected())//Results --> so all of Result!
         {
             
             
         }
         else if(cbSelectAll.isSelected())//All points that are available
         {
             
         }        
             
     }
    
    
    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel(); 
        inChannel.transferTo(0, inChannel.size(), outChannel);
         }
    
    public void addDescription ()
    {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Date currentTime = new Date();
        
             Document doc = getDocument(revMan);
       
             
             boolean onlyOneTime=true;
             String textCsv;
             Vector vDataTable = new Vector();
             StringBuffer sbNotInCSV = new StringBuffer();
             
             
             for(int a=47;a<vExportedCsv.size();a++)   //start new
             {
                 String [] arCsvExport = vExportedCsv.elementAt(a).toString().split(";");
                 int zero = Integer.parseInt(arCsvExport[0]);
                 int one =Integer.parseInt(arCsvExport[1]);
                 int two =Integer.parseInt(arCsvExport[2]);            
                 

                if( zero > 0 && one > 0 && two >= 0 && arCsvExport[3].contains(":"))
                {
                 textCsv = arCsvExport[3].toString().substring(arCsvExport[3].indexOf(":"),arCsvExport[3].length());  // end new
                 
		
                     for(int c=2;c<vScales.size();c=c+22)
                             {
                                System.out.println("scales bla: "+vScales.elementAt(c).toString()+" c "+c+" size: "+vScales.size());
                                String word="";
                                boolean fromHere=false;
                                boolean alreadyInCsv=false;
                                   try
                                    {  
                                        for (int h = 0; h < textCsv.length(); h++) 
                                        {
                                            
                                            if (textCsv.substring(h,h+1).equals(","))
                                            {
                                                break;
                                            }
                                            else
                                            {                                                
                                                 
                                                if(textCsv.substring(h,h+1).equals("("))
                                                {      
                                                    h=h+1;
                                                    word=word+textCsv.substring(h,h+1);    
                                                    fromHere=true;                                                    
                                                }
                                                else if(fromHere==true)
                                                {
                                                    word=word+textCsv.substring(h,h+1);   
                                                                                                       
                                                }
                                                else 
                                                {
                                                    
                                                }
                                                
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        
                                    }
                                   
                                    for(int i=3;i<vScales.size();i=i+22)
                                    {      
                                        if(vScales.elementAt(i-3).toString().trim().equalsIgnoreCase("REF-SZ"))
                                        {
                                            break;
                                        }
                                     //   System.out.println("in already: "+word+"vScales: "+vScales.elementAt(i).toString());
                                        if((vScales.elementAt(i).toString().contains(word)
                                                || word.contains(vScales.elementAt(i).toString()))&&!vScales.elementAt(i).toString().isEmpty())
                                        {                                            
                                            alreadyInCsv = true;
                                        }
                                    }
                                
                                    System.out.println("already boolean: "+alreadyInCsv);
                                
                                if(alreadyInCsv==true && textCsv.contains(vScales.elementAt(c+1).toString()) && !vScales.elementAt(c+1).toString().equals("") )  // abbreviation
                                {                                    
                                  
                                        for(int d =0;d<vDataTable.size();d++)
                                        {  
                                            if(vDataTable.elementAt(d).toString().contains(vScales.elementAt(c).toString()))
                                                {
                                                    onlyOneTime=false;
                                                break;
                                                }
                                                else
                                                {
                                                    onlyOneTime=true;
                                                }                                           
                                        }
                                   
                                        if(onlyOneTime==true)
                                        {                                           
                                                
                                                 StringBuffer sbReference = new StringBuffer();
                                                 for(int e =c+4;e<c+20;e++)
                                                 {
                                                     System.out.println("in for sb: "+ vScales.elementAt(e) +" for scale: "+vScales.elementAt(c));
                                                  sbReference.append(vScales.elementAt(e)+"#");
                                                 }
                                                 vDataTable.addElement(vScales.elementAt(c-1)+"#"+vScales.elementAt(c)+"#"+vScales.elementAt(c+1)+"#"+vScales.elementAt(c+3)+"#"+vScales.elementAt(c+2)+"#"+sbReference.toString()); 
                                        }
                                        System.out.println("vDate Table django: "+vScales.elementAt(c-1)+"#"+vScales.elementAt(c)+"#"+vScales.elementAt(c+1)+"#"+vScales.elementAt(c+3)+"#"+vScales.elementAt(c+2));
                                       
                             }
                                else
                                {
                                   
                                        if (sbNotInCSV.toString().contains(word)) 
                                        {

                                        } 
                                        else if(alreadyInCsv==false)
                                        {
                                            sbNotInCSV.append(word+"#");
                                        }
                                       
                                       System.out.println("sbNot: "+sbNotInCSV.toString());
                                      
                                  
                                   
                                }
                                
                       
                                }	

             
                    }
             
            
         /*    for(int a=0;a<nl.getLength();a++)
             {
                 Element incl =  (Element)doc.getElementsByTagName("INCLUDED_CHAR").item(a);
                stCharOutcomes = incl.getElementsByTagName("CHAR_OUTCOMES").item(0).getTextContent().trim();
                System.out.println("stChar: "+stCharOutcomes +"length: "+nl.getLength());
                
                
                         String [] arOutcome = stCharOutcomes.split(" ");
                         
                         
                         for(int b=0;b<arOutcome.length;b++)
                         {
                             System.out.println("arOutcome: "+arOutcome[b].toString());
                             
                             for(int c=3;c<vScales.size();c=c+6)
                             {
                                System.out.println("scales: "+vScales.elementAt(c).toString());
                                
                                if(arOutcome[b].contains(vScales.elementAt(c).toString()))
                                    {
                                        for(int d =0;d<vDataTable.size();d++)
                                        {
                                            if(vDataTable.elementAt(d).toString().contains(vScales.elementAt(c).toString()))
                                            {
                                                onlyOneTime=false;
                                                break;
                                            }
                                            else
                                            {
                                                onlyOneTime=true;
                                            }
                                            
                                        }
                                            
                                        
                                        if(onlyOneTime==true)
                                        {
                                            vDataTable.addElement(vScales.elementAt(c-2)+"#"+vScales.elementAt(c-1)+"#"+vScales.elementAt(c)+"#"+vScales.elementAt(c+1)+"#"+vScales.elementAt(c+2)); 
                                           
                                        }
                                        
                                        
                                    }
                            
                             }
                          
                         }
          */
             }
            
            for(int i=0;i<vDataTable.size();i++)
            {
            System.out.println("dataTable: "+vDataTable.elementAt(i).toString());
            }
             
        
        Vector vAllReferences = new Vector();
        Node tag = doc.getElementsByTagName("INCLUDED_STUDIES_DESCR").item(0);

        Element subsection = doc.createElement("SUBSECTION");
        Element heading = doc.createElement("HEADING");

        subsection.appendChild(heading);
        Attr attr = doc.createAttribute("LEVEL");
        attr.setValue("4");
        heading.setAttributeNode(attr);
        heading.appendChild(doc.createTextNode("6. Outcome measures"));
        
        Element paragraph3 = doc.createElement("P");   // ADD TEXT (TEXT CAN ONLY BE ADDED IN P; MARKER IS PART OF PARAGRAPG3; PARAGRAPH3 IS PART OF INTERVENTION; INTERVENTION IS MAIN NODE)    
        Element marker = doc.createElement("MARKER");   // MARKER IS NEEDED TO ADD TEXT)
        marker.appendChild(doc.createTextNode("*------ Start of HAL generated text " + formatter.format(currentTime) + " ------* "));
        paragraph3.appendChild(marker);
        subsection.appendChild(paragraph3);

     //   Element paragraph = doc.createElement("P");
     //   paragraph.appendChild(doc.createTextNode(""));

     //   subsection.appendChild(paragraph);
        tag.appendChild(subsection);

        Collections.sort(vDataTable);
         String [] arSplittedText = new String[21];
         
        
        for (int c = 0; c < vDataTable.size(); c++) 
        {
            System.out.println("vector: " + vDataTable.elementAt(c).toString());
            
            if(c==vDataTable.size()-1)
            {
                lastEntry=true;
            }
            
        String [] arSplittedText2 = vDataTable.elementAt(c).toString().split("#");
        
         for(int f=0;f<21;f++)
            {
                arSplittedText[f]="";
                
                try
                {
                    arSplittedText[f]=arSplittedText2[f];
                }
                catch(Exception e)
                {
                
                }
            }
         
         
        for(int d=0;d<arSplittedText.length;d++)
        {
       
            System.out.println("array splitted: "+arSplittedText[d]);
        }
        
             if(arSplittedText[0].equalsIgnoreCase("Mental state scales"))
             {
                 if(firstTime==true)
                 {
                     counterGeneral=counterGeneral+1;
                     
                     subsectionSub = doc.createElement("SUBSECTION");
                     Element heading2 = doc.createElement("HEADING");                     
                     subsectionSub.appendChild(heading2);
                     Attr attr2 = doc.createAttribute("LEVEL");
                     attr2.setValue("5");
                     heading2.setAttributeNode(attr2);
                     heading2.appendChild(doc.createTextNode("6."+counterGeneral+" "+arSplittedText[0]));

                     firstTime = false;
                     counterFirstPoint1 = counterGeneral;
                     
                 }
                 
                 Element paragraph2 = doc.createElement("P");
                 Element italic = doc.createElement("I");
                 italic.appendChild(doc.createTextNode("6."+counterFirstPoint1+"."+counterSubpoint1+" "+arSplittedText[1]+" - "+arSplittedText[2]));
                 paragraph2.appendChild(italic);
                 paragraph2.appendChild(doc.createTextNode(" ("));

                 Element link = doc.createElement("LINK");
                 Attr attrLink1 = doc.createAttribute("REF");
                 Attr attrLink2 = doc.createAttribute("TYPE");
                 String stAttrLink1 = arSplittedText[4].replaceAll(" ", "-");
                 attrLink1.setValue("REF-" + stAttrLink1);
                 attrLink2.setValue("REFERENCE");
                 link.setAttributeNode(attrLink1);
                 link.setAttributeNode(attrLink2);
                 link.appendChild(doc.createTextNode(arSplittedText[4]));
                 paragraph2.appendChild(link); 

                 paragraph2.appendChild(doc.createTextNode(")"));
                 Element br = doc.createElement("BR");
                 paragraph2.appendChild(br);
                 paragraph2.appendChild(doc.createTextNode(arSplittedText[3]));

                 subsectionSub.appendChild(paragraph2);
                 
                 
                 
                 if(lastEntry==true)
                 {
                     String []arNotInCsvSplit= sbNotInCSV.toString().split("#");
                     
                     Element paragraph4=doc.createElement("P");
                     Element italic2 = doc.createElement("I");
                     Element bold = doc.createElement("B");
                     bold.appendChild(doc.createTextNode("These scales are in the 'Data and Analysis' but were not found in the scales-CSV-file:"));
                     Element br3 = doc.createElement("BR"); 
                     paragraph4.appendChild(bold);
                     paragraph4.appendChild(br3);
                     paragraph4.appendChild(italic2);
                     
                     
                     for(int y=0;y<arNotInCsvSplit.length;y++)
                     {
                          italic2.appendChild(doc.createTextNode(arNotInCsvSplit[y]));
                          Element br2 = doc.createElement("BR"); 
                          italic2.appendChild(br2);
                     }
                     
                    
                     
                     
                     Element paragraph = doc.createElement("P");
                     Element marker2 = doc.createElement("MARKER");
                     marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
                     paragraph.appendChild(marker2);
                     subsectionSub.appendChild(paragraph4);
                     subsectionSub.appendChild(paragraph);                     
                 }
                 subsection.appendChild(subsectionSub);            
                 counterSubpoint1=counterSubpoint1+1;
                 
                 

             }
             else if(arSplittedText[0].equalsIgnoreCase("Global state scales"))
             {
                   if(firstTime1==true)
                 {
                     counterGeneral=counterGeneral+1;
                     
                     subsectionSub1 = doc.createElement("SUBSECTION");
                     Element heading2 = doc.createElement("HEADING");

                     subsectionSub1.appendChild(heading2);
                     Attr attr2 = doc.createAttribute("LEVEL");
                     attr2.setValue("5");
                     heading2.setAttributeNode(attr2);
                     heading2.appendChild(doc.createTextNode("6."+counterGeneral+" "+arSplittedText[0]));

                     firstTime1 = false;
                     counterFirstPoint2 = counterGeneral;
                     
                 }
                 
                 Element paragraph2 = doc.createElement("P");
                 Element italic = doc.createElement("I");
                 italic.appendChild(doc.createTextNode("6."+counterFirstPoint2+"."+counterSubpoint1+" "+arSplittedText[1]+" - "+arSplittedText[2]));
                 paragraph2.appendChild(italic);
                 paragraph2.appendChild(doc.createTextNode(" ("));

                 Element link = doc.createElement("LINK");
                 Attr attrLink1 = doc.createAttribute("REF");
                 Attr attrLink2 = doc.createAttribute("TYPE");
                 String stAttrLink1 = arSplittedText[4].replaceAll(" ", "-");
                 attrLink1.setValue("REF-" + stAttrLink1);
                 attrLink2.setValue("REFERENCE");
                 link.setAttributeNode(attrLink1);
                 link.setAttributeNode(attrLink2);
                 link.appendChild(doc.createTextNode(arSplittedText[4]));
                 paragraph2.appendChild(link);

                 paragraph2.appendChild(doc.createTextNode(")"));
                 Element br = doc.createElement("BR");
                 paragraph2.appendChild(br);
                 paragraph2.appendChild(doc.createTextNode(arSplittedText[3]));
                 

                 subsectionSub1.appendChild(paragraph2);                 
                 
                 if(lastEntry==true)
                 {
                      String []arNotInCsvSplit= sbNotInCSV.toString().split("#");
                     
                     Element paragraph4=doc.createElement("P");
                     Element italic2 = doc.createElement("I");
                     Element bold = doc.createElement("B");
                     bold.appendChild(doc.createTextNode("These scales are in the 'Data and Analysis' but were not found in the scales-CSV-file:"));
                     Element br3 = doc.createElement("BR"); 
                     paragraph4.appendChild(bold);
                     paragraph4.appendChild(br3);
                     paragraph4.appendChild(italic2);
                     
                     
                     for(int y=0;y<arNotInCsvSplit.length;y++)
                     {
                          italic2.appendChild(doc.createTextNode(arNotInCsvSplit[y]));
                          Element br2 = doc.createElement("BR"); 
                          italic2.appendChild(br2);
                          System.out.println("arSplit: "+arNotInCsvSplit[y]);
                     }
                     
                     Element paragraph = doc.createElement("P");
                     Element marker2 = doc.createElement("MARKER");
                     marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
                     paragraph.appendChild(marker2);
                     subsectionSub1.appendChild(paragraph4);
                     subsectionSub1.appendChild(paragraph);                     
                 }
                 subsection.appendChild(subsectionSub1);                 
                 counterSubpoint1=counterSubpoint1+1;
                 

             }
             else if(arSplittedText[0].equalsIgnoreCase("Adverse effects scales"))
             {
                   if(firstTime2==true)
                 {
                     counterGeneral=counterGeneral+1;
                     
                     subsectionSub2 = doc.createElement("SUBSECTION");
                     Element heading2 = doc.createElement("HEADING");

                     subsectionSub2.appendChild(heading2);
                     Attr attr2 = doc.createAttribute("LEVEL");
                     attr2.setValue("5");
                     heading2.setAttributeNode(attr2);
                     heading2.appendChild(doc.createTextNode("6."+counterGeneral+" "+arSplittedText[0]));

                     firstTime2 = false;
                     counterFirstPoint3 = counterGeneral;
                     
                 }
                 
                 Element paragraph2 = doc.createElement("P");
                 Element italic = doc.createElement("I");
                 italic.appendChild(doc.createTextNode("6."+counterFirstPoint3+"."+counterSubpoint3+" "+arSplittedText[1]+" - "+arSplittedText[2]));
                 paragraph2.appendChild(italic);
                 paragraph2.appendChild(doc.createTextNode(" ("));

                 Element link = doc.createElement("LINK");
                 Attr attrLink1 = doc.createAttribute("REF");
                 Attr attrLink2 = doc.createAttribute("TYPE");
                 String stAttrLink1 = arSplittedText[4].replaceAll(" ", "-");
                 attrLink1.setValue("REF-" + stAttrLink1);
                 attrLink2.setValue("REFERENCE");
                 link.setAttributeNode(attrLink1);
                 link.setAttributeNode(attrLink2);
                 link.appendChild(doc.createTextNode(arSplittedText[4]));
                 paragraph2.appendChild(link); 

                 paragraph2.appendChild(doc.createTextNode(")"));
                 Element br = doc.createElement("BR");
                 paragraph2.appendChild(br);
                 paragraph2.appendChild(doc.createTextNode(arSplittedText[3]));

                 subsectionSub2.appendChild(paragraph2);
                 
                 if(lastEntry==true)
                 {
                      String []arNotInCsvSplit= sbNotInCSV.toString().split("#");
                     
                     Element paragraph4=doc.createElement("P");
                     Element italic2 = doc.createElement("I");
                     Element bold = doc.createElement("B");
                     bold.appendChild(doc.createTextNode("These scales are in the 'Data and Analysis' but were not found in the scales-CSV-file:"));
                     Element br3 = doc.createElement("BR"); 
                     paragraph4.appendChild(bold);
                     paragraph4.appendChild(br3);
                     paragraph4.appendChild(italic2);
                     
                     
                     for(int y=0;y<arNotInCsvSplit.length;y++)
                     {
                          italic2.appendChild(doc.createTextNode(arNotInCsvSplit[y]));
                          Element br2 = doc.createElement("BR"); 
                          italic2.appendChild(br2);
                     }
                     
                     Element paragraph = doc.createElement("P");
                     Element marker2 = doc.createElement("MARKER");
                     marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
                     paragraph.appendChild(marker2);
                     subsectionSub2.appendChild(paragraph4);
                     subsectionSub2.appendChild(paragraph);
                     
                 }
                 subsection.appendChild(subsectionSub2);
                 counterSubpoint3=counterSubpoint3+1;
             }
             else if(arSplittedText[0].equalsIgnoreCase("Quality of Life"))
             {
                if(firstTime3==true)
                 {
                     counterGeneral=counterGeneral+1;
                     
                     subsectionSub3 = doc.createElement("SUBSECTION");
                     Element heading2 = doc.createElement("HEADING");
                     subsectionSub3.appendChild(heading2);
                     Attr attr2 = doc.createAttribute("LEVEL");
                     attr2.setValue("5");
                     heading2.setAttributeNode(attr2);
                     heading2.appendChild(doc.createTextNode("6."+counterGeneral+" "+arSplittedText[0]));

                     firstTime3 = false;
                     counterFirstPoint4 = counterGeneral;
                     
                 }
                 
                 Element paragraph2 = doc.createElement("P");
                 Element italic = doc.createElement("I");
                 italic.appendChild(doc.createTextNode("6."+counterFirstPoint4+"."+counterSubpoint4+" "+arSplittedText[1]+" - "+arSplittedText[2]));
                 paragraph2.appendChild(italic);
                 paragraph2.appendChild(doc.createTextNode(" ("));

                 Element link = doc.createElement("LINK");
                 Attr attrLink1 = doc.createAttribute("REF");
                 Attr attrLink2 = doc.createAttribute("TYPE");
                 String stAttrLink1 = arSplittedText[4].replaceAll(" ", "-");
                 attrLink1.setValue("REF-" + stAttrLink1);
                 attrLink2.setValue("REFERENCE");
                 link.setAttributeNode(attrLink1);
                 link.setAttributeNode(attrLink2);
                 link.appendChild(doc.createTextNode(arSplittedText[4]));
                 paragraph2.appendChild(link); 

                 paragraph2.appendChild(doc.createTextNode(")"));
                 Element br = doc.createElement("BR");
                 paragraph2.appendChild(br);
                 paragraph2.appendChild(doc.createTextNode(arSplittedText[3]));

                 subsectionSub3.appendChild(paragraph2);
                 

                 
                 
                 if(lastEntry==true)
                 {
                      String []arNotInCsvSplit= sbNotInCSV.toString().split("#");
                     
                     Element paragraph4=doc.createElement("P");
                     Element italic2 = doc.createElement("I");
                     Element bold = doc.createElement("B");
                     bold.appendChild(doc.createTextNode("These scales are in the 'Data and Analysis' but were not found in the scales-CSV-file:"));
                     Element br3 = doc.createElement("BR"); 
                     paragraph4.appendChild(bold);
                     paragraph4.appendChild(br3);
                     paragraph4.appendChild(italic2);
                     
                     
                     for(int y=0;y<arNotInCsvSplit.length;y++)
                     {
                          italic2.appendChild(doc.createTextNode(arNotInCsvSplit[y]));
                          Element br2 = doc.createElement("BR"); 
                          italic2.appendChild(br2);
                     }
                     
                     Element paragraph = doc.createElement("P");
                     Element marker2 = doc.createElement("MARKER");
                     marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
                     paragraph.appendChild(marker2);
                     subsectionSub3.appendChild(paragraph4);
                     subsectionSub3.appendChild(paragraph);                     
                 }
                 subsection.appendChild(subsectionSub3);
                 counterSubpoint4=counterSubpoint4+1;
             }
       
                System.out.println("in counterRef: "+arSplittedText[4]);
                String type ="";
                Node tag2 = doc.getElementsByTagName("ADDITIONAL_REFERENCES").item(0);
                Element reference = doc.createElement("REFERENCE");
                
                
                tag2.appendChild(reference);                 
                
                String stReference="REF-"+arSplittedText[4].toString().trim().replace(" ", "-");
                String stName = arSplittedText[4];
                
                
                for(int w = 0;w<vAllReferences.size();w++)   
                {
                     if(vAllReferences.elementAt(w).toString().equals(stReference))
                     {
                         stReference= stReference+"a";
                         stName = stName+"a";
                     }
                }
                
                System.out.println("stName: "+stName+" st Ref: "+stReference);
                
                     Attr attr2 = doc.createAttribute("ID");
                     attr2.setValue(stReference);
                     reference.setAttributeNode(attr2);
                     
                     vAllReferences.addElement(stReference);
                     
                     Attr attr3 = doc.createAttribute("NAME");
                     attr3.setValue(stName);
                     reference.setAttributeNode(attr3);
                     
                     Attr attr4 = doc.createAttribute("TYPE");
                     if(arSplittedText[5].equalsIgnoreCase("Conference proceedings"))
                     {
                         type = "CONFERENCE_PROC";
                     }
                     else if(arSplittedText[5].equalsIgnoreCase("Journal article"))
                     {
                         type = "JOURNAL_ARTICLE";
                     }
                     else if(arSplittedText[5].equalsIgnoreCase("Section of Book")||arSplittedText[5].equalsIgnoreCase("Book"))
                     {
                         type = "BOOK_SECTION";
                     }
                      else if(arSplittedText[5].equalsIgnoreCase("Other"))
                     {
                         type = "OTHER";
                     }                     
                     
                     attr4.setValue(type);
                     reference.setAttributeNode(attr4);                     
               
                    
                     System.out.println("before tags: "+arSplittedText[16]);
                     
                      if(!arSplittedText[6].equals(""))
                      {
                          Element au = doc.createElement("AU");
                          au.appendChild(doc.createTextNode(arSplittedText[6].trim()));
                          reference.appendChild(au);
                      }
                      if(!arSplittedText[7].equals(""))
                      {
                          Element ti = doc.createElement("TI");
                          ti.appendChild(doc.createTextNode(arSplittedText[7].trim()));
                          reference.appendChild(ti);
                      }
                      if(!arSplittedText[8].equals(""))
                      {
                          Element to = doc.createElement("TO");
                          to.appendChild(doc.createTextNode(arSplittedText[8].trim()));
                          reference.appendChild(to);
                      }
                      if(!arSplittedText[9].equals(""))
                      {
                          Element so = doc.createElement("SO");
                          so.appendChild(doc.createTextNode(arSplittedText[9].trim()));
                          reference.appendChild(so);
                      }
                      if(!arSplittedText[10].equals(""))
                      {
                          Element yr = doc.createElement("YR");
                          yr.appendChild(doc.createTextNode(arSplittedText[10].trim()));
                          reference.appendChild(yr);
                      }
                        if(!arSplittedText[11].equals(""))
                      {
                          Element en = doc.createElement("EN");
                          en.appendChild(doc.createTextNode(arSplittedText[11].trim()));
                          reference.appendChild(en);
                      }
                      if(!arSplittedText[12].equals(""))
                      {
                          Element pb = doc.createElement("PB");
                          pb.appendChild(doc.createTextNode(arSplittedText[12].trim()));
                          reference.appendChild(pb);
                      }
                       if(!arSplittedText[13].equals(""))
                      {
                          Element cy = doc.createElement("CY");
                          cy.appendChild(doc.createTextNode(arSplittedText[13].trim()));
                          reference.appendChild(cy);
                      }
                      if(!arSplittedText[14].equals(""))
                      {
                          Element vl = doc.createElement("VL");
                          vl.appendChild(doc.createTextNode(arSplittedText[14].trim()));
                          reference.appendChild(vl);
                      }
                      if(!arSplittedText[15].equals(""))
                      {
                          Element no = doc.createElement("NO");
                          no.appendChild(doc.createTextNode(arSplittedText[15]));
                          reference.appendChild(no);
                      }
                      if(!arSplittedText[16].equals(""))
                      {
                          Element pg = doc.createElement("PG");
                          pg.appendChild(doc.createTextNode(arSplittedText[16].trim()));
                          reference.appendChild(pg);
                      }
                      if(!arSplittedText[17].equals(""))
                      {
                          Element ed = doc.createElement("ED");
                          ed.appendChild(doc.createTextNode(arSplittedText[17].trim()));
                          reference.appendChild(ed);
                      }
                       if(!arSplittedText[18].equals(""))
                      {
                          Element md = doc.createElement("MD");
                          md.appendChild(doc.createTextNode(arSplittedText[18].trim()));
                          reference.appendChild(md);
                      }
                       if(!arSplittedText[19].equals(""))
                      {
                          Element md = doc.createElement("NT");
                          md.appendChild(doc.createTextNode(arSplittedText[19].trim()));
                          reference.appendChild(md);
                      }
                     
                    
                    
                      if(!arSplittedText[20].equals(""))
                      {
                          Element identifiers = doc.createElement("IDENTIFIERS");
                          
                          Element identifier = doc.createElement("IDENTIFIER");
                          String typeID="";
                          
                          Attr attr5 = doc.createAttribute("TYPE");
                          Attr attr6 = doc.createAttribute("VALUE");                          
                          for (int p = 0; p < arSplittedText[20].length(); p++) 
                          {
                              if (arSplittedText[20].substring(p, p + 1).equals(" ")) 
                              {
                                  break;
                              } 
                              else 
                              {
                                  typeID = typeID + arSplittedText[20].substring(p, p + 1);
                              }
                          }
                          System.out.println("typeID: "+typeID);
                          
                          attr5.setValue(typeID);
                          attr6.setValue(arSplittedText[20].substring(typeID.length()+4, arSplittedText[20].length()));
                          identifier.setAttributeNode(attr5);
                          identifier.setAttributeNode(attr6);
                          identifiers.appendChild(identifier);
                          reference.appendChild(identifiers);
                        
                      }
                      else if(arSplittedText[20].equals(""))
                      {
                          Element identifier = doc.createElement("IDENTIFIERS");
                               reference.appendChild(identifier);
                               System.out.println("in else identifiers");
                      }
      
          
      }
             
          try 
             {
                
                 TransformerFactory transformerFactory = TransformerFactory.newInstance();
                 Transformer transformer;

                 transformer = transformerFactory.newTransformer();
                 DOMSource source = new DOMSource(doc);
                 StreamResult result = new StreamResult(new File(revMan));   
                 transformer.transform(source, result);
                 
              //   cleaner.deleteSpecialChars(filepath);
                 System.out.println("DONE!");
             } 
             catch (Exception e) 
             {
                 e.printStackTrace();
             }
        
    }
         
         
             public String getLanguage()
         {
             String language = (String)cbLanguage.getItemAt(1);
             System.out.println("lang in Methode: "+language);
             return language;
         }
             
     private static Document getDocument(String file) 
    {
        try 
        {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(file);
        } 
        catch (Exception e) 
        {
            return null;
        }
    }
    

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox box_style;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_start;
    private javax.swing.JCheckBox cbAbstract;
    private javax.swing.JCheckBox cbDescription;
    private javax.swing.JCheckBox cbDiscussion;
    private javax.swing.JCheckBox cbEffects;
    private javax.swing.JComboBox cbLanguage;
    private javax.swing.JCheckBox cbResult;
    private javax.swing.JCheckBox cbResultOfSearch;
    private javax.swing.JCheckBox cbSelectAll;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
