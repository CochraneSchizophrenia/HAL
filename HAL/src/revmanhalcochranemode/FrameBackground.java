/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package revmanhalcochranemode;

import com.sun.org.apache.xerces.internal.parsers.*;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author msabs1
 */
public class FrameBackground extends javax.swing.JFrame 
{

    private String path="";
    private Element paragraph;
    private Element italic;
    
    private File openCsv;
    private String pathCSV="";
    
    Complex1 cleaner = new Complex1(null);
    
    private String stPartOneOne="";
    private String stPartOneTwo="";
   
    private String stPartTwoOne="";
    private String stPartTwoTwo="";
    
    private String stPartThreeOne="";
    private String stPartThreeTwo="";
    
    private String stDrugTwo="";
    
    private boolean part1=false;
     private boolean part2=false;
      private boolean part3=false;      
      private boolean nextDrug=false;
      private boolean firstTime=true;
      private boolean activateMethods=false;
      private boolean checkReferences=false;
      private boolean pressed1=false;
      private boolean pressed2=false;
      
      private StringBuffer sbWholeLineLeft = new StringBuffer();
      private StringBuffer sbWholeLineRight = new StringBuffer();
      
       private StringBuffer sbWholeLineLeftWithSemicolonDrugOne = new StringBuffer();
       private StringBuffer sbWholeLineLeftWithSemicolonDrugTwo = new StringBuffer();
      private StringBuffer sbWholeLineRightWithSemicolon = new StringBuffer();
    
      
     private Vector vRefCondition=new Vector();
     private Vector vRefIntervention=new Vector();
    
    /**
     * Creates new form FrameBackground
     */
    public FrameBackground(String p,boolean checkedBoth) 
    {
        initComponents();
        path=p;
        activateMethods=checkedBoth;
        this.setLocation(320, 80);  
        jPanel1.setBackground(new Color(226,226,226));
        this.setBackground(new Color(226,226,226));
        tfTitle.setEditable(false);
        this.validate();
        this.setVisible(true);  
        tfTitle.setCaretPosition(0);
        this.setTitle("RevMan Hal - Protocol - Background");
        this.run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tfTitle = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddLeft = new javax.swing.JButton();
        btnAddRight = new javax.swing.JButton();
        btn_return = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taLeft = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taRight = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnMethods = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        tfTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("<html><body>Suggestions for <b>interventions</b>:</body></html>");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("<html><body>Suggestions for <b> conditions:</b></body></html>");

        btnAddLeft.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/AddBtnSmall.png"))); // NOI18N
        btnAddLeft.setText(" ADD");
        btnAddLeft.setToolTipText("");
        btnAddLeft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddLeftMouseClicked(evt);
            }
        });

        btnAddRight.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/AddBtnSmall.png"))); // NOI18N
        btnAddRight.setText(" ADD");
        btnAddRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddRightMouseClicked(evt);
            }
        });

        btn_return.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_return.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/back.png"))); // NOI18N
        btn_return.setText(" BACK");
        btn_return.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_returnMouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/hal.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel4.setText("Background");

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 33)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 249));
        jLabel5.setText("RevMan HAL ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("<html><body>In this part of the program you are able to add the drug or illness information of the title \nto the RevMan file. </body></html>");

        taLeft.setColumns(20);
        taLeft.setRows(5);
        jScrollPane1.setViewportView(taLeft);

        taRight.setColumns(20);
        taRight.setRows(5);
        taRight.setWrapStyleWord(true);
        jScrollPane2.setViewportView(taRight);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Title of the RevMan file you chose:");

        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/TxtFileSmall.png"))); // NOI18N
        btnEdit.setText("Open CSV");
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditMouseClicked(evt);
            }
        });

        btnMethods.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnMethods.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/arrowRight.png"))); // NOI18N
        btnMethods.setText("CONTINUE");
        btnMethods.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnMethods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMethodsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_return, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMethods, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addGap(43, 43, 43))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(btnAddRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(btnAddLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jLabel3)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel7)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRight, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_return, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethods, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        jLabel2.getAccessibleContext().setAccessibleName("<html><body>Suggestions for <b>conditions</b>:</body></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_returnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_returnMouseClicked
        // TODO add your handling code here:
        this.dispose();
        FrameProtocol frame = new FrameProtocol(path);
        frame.setVisible(true);
        
        frame.validate(); 
    }//GEN-LAST:event_btn_returnMouseClicked

    private void btnAddLeftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddLeftMouseClicked
        
        
        if(taLeft.getText().isEmpty())
        {
             final JOptionPane pane = new JOptionPane("There is no text that could be added!");
             final JDialog d = pane.createDialog(null, "ERROR");
             d.setLocation(450, 430);
             d.setVisible(true);
        }
        else if(pressed1==false)
        {    
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Date currentTime = new Date();

        Document doc = getDocument(path);
        Node intervention = doc.getElementsByTagName("INTERVENTION").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME

     //   File file = new File("C:\\Users\\msash9\\Desktop\\RevManHalCochraneModeUPDATE\\RevManHalCochraneModeUPDATE\\src\\revmanhalcochranemode\\001.bmp");
    //    Element file2 = doc.createElement("FILE");
        
      //  Image image = null;
     //   try {
     //       image = ImageIO.read(file);
     //   } catch (IOException ex) {
       //     ex.printStackTrace();
      //  }
     
     //   file2.appendChild(doc.createTextNode(image.toString()));
        
        
        paragraph = doc.createElement("P");   // ADD TEXT (TEXT CAN ONLY BE ADDED IN P; MARKER IS PART OF PARAGRAPG3; PARAGRAPH3 IS PART OF INTERVENTION; INTERVENTION IS MAIN NODE)    
        Element marker = doc.createElement("MARKER");   // MARKER IS NEEDED TO ADD TEXT)
        marker.appendChild(doc.createTextNode("*------ Start of HAL generated text " + formatter.format(currentTime) + " ------* "));
        paragraph.appendChild(marker);
    //    paragraph.appendChild(file2);
        intervention.appendChild(paragraph);
        
        
        paragraph = doc.createElement("P");        
        italic = doc.createElement("I");
        italic.appendChild(doc.createTextNode("Class/formula"));
        paragraph.appendChild(italic);
        intervention.appendChild(paragraph);
                        
        paragraph = doc.createElement("P");
        paragraph.appendChild(doc.createTextNode(stPartOneOne));
        intervention.appendChild(paragraph);
        
        paragraph = doc.createElement("P");
        italic = doc.createElement("I");
        italic.appendChild(doc.createTextNode("Mechanism/selected phrases"));
        paragraph.appendChild(italic);
        intervention.appendChild(paragraph);
        
        paragraph = doc.createElement("P");
        paragraph.appendChild(doc.createTextNode(stPartTwoOne));
        intervention.appendChild(paragraph);
        
          paragraph = doc.createElement("P");
             marker = doc.createElement("MARKER");  
              paragraph.appendChild(marker);
              
            italic = doc.createElement("I");
            italic.appendChild(doc.createTextNode("References to this 'intervention' text that may be useful have been added to "));
            
             
            Element bold=doc.createElement("B");
            bold.appendChild(doc.createTextNode("'References>Additional references>Classification pending'"));
            
            italic.appendChild(bold);
            italic.appendChild(doc.createTextNode(" section. These references may not be perfect and will need checked. This yellow text, and the list below should be deleted once complete."));
            
            marker.appendChild(italic);
            intervention.appendChild(paragraph);
            
             paragraph = doc.createElement("P");
             marker = doc.createElement("MARKER");
             marker.appendChild(doc.createTextNode(stPartThreeOne));
             paragraph.appendChild(marker);
        
            intervention.appendChild(paragraph);
        
        if (stPartThreeTwo.equals("")) 
        {

        }
        else if(!sbWholeLineLeftWithSemicolonDrugTwo.toString().isEmpty())
         {
             paragraph = doc.createElement("P");   
             italic = doc.createElement("B");
             italic.appendChild(doc.createTextNode("Drug two: "));    
              paragraph.appendChild(italic);
              intervention.appendChild(paragraph);
             
             
              paragraph = doc.createElement("P");
              italic = doc.createElement("I");
             italic.appendChild(doc.createTextNode("Class/formula"));
             paragraph.appendChild(italic);
              intervention.appendChild(paragraph);
        
             paragraph = doc.createElement("P");
             paragraph.appendChild(doc.createTextNode(stPartOneTwo));
             intervention.appendChild(paragraph);

             paragraph = doc.createElement("P");
            italic = doc.createElement("I");
            italic.appendChild(doc.createTextNode("Mechanism/selected phrases"));
            paragraph.appendChild(italic);
            intervention.appendChild(paragraph);
             
             paragraph = doc.createElement("P");
             paragraph.appendChild(doc.createTextNode(stPartTwoTwo));
             intervention.appendChild(paragraph);

             paragraph = doc.createElement("P");
             marker = doc.createElement("MARKER");  
              paragraph.appendChild(marker);
              
            italic = doc.createElement("I");
            italic.appendChild(doc.createTextNode("References to this 'intervention' text that may be useful have been added to "));
            
             
            Element bold2=doc.createElement("B");
            bold2.appendChild(doc.createTextNode("'References>Additional references>Classification pending'"));
            
            italic.appendChild(bold2);
            italic.appendChild(doc.createTextNode(" section. These references may not be perfect and will need checked. This yellow text, and the list below should be deleted once complete."));
            
            marker.appendChild(italic);
            intervention.appendChild(paragraph);
            
             paragraph = doc.createElement("P");
             marker = doc.createElement("MARKER");
             marker.appendChild(doc.createTextNode(stPartThreeTwo));
             paragraph.appendChild(marker);
             
              
             
             intervention.appendChild(paragraph);

         }        
         
        paragraph = doc.createElement("P");
        Element marker2 = doc.createElement("MARKER");
        marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
        paragraph.appendChild(marker2);    
        intervention.appendChild(paragraph);      

        Vector vAllReferencesIntervention=new Vector();
         String author="";
                String type ="";

                 Node tag = doc.getElementsByTagName("PENDING_REFERENCES").item(0);
                 String stName="";
                 String stReference="";
                
        
        for(int a=0;a<vRefIntervention.size();a++)
        {
           String[] arIntervention= vRefIntervention.elementAt(a).toString().split("#");
            
           /* 
            
            if(vRefIntervention.elementAt(a).toString().contains("#"))
            {
                 arIntervention = vRefIntervention.elementAt(a).toString().split("#");
            }
            else
            {
                arIntervention = vRefIntervention.elementAt(a).toString();
            }
               */
           
            for(int b=0;b<arIntervention.length;b++)
            {
                
                
                if(arIntervention[b].isEmpty())
                {
                
                }
                else
                {
                    
                String[]arRefIntervention = new String[6];  
                arRefIntervention[5]="";
                String[] arRefIntervention2= arIntervention[b].split("~");
                
                for(int g=0;g<arRefIntervention2.length;g++)
                {
                    arRefIntervention[g]=arRefIntervention2[g];
                }
               
                
                for(int p2=0;p2<arRefIntervention.length;p2++)
                    {
                       System.out.println("ar: "+arRefIntervention[p2]); 
                    }
                
                Element reference = doc.createElement("REFERENCE");
                    author="";                   
                 
                   
                tag.appendChild(reference);
                
               
                 
                for(int p=0;p<arRefIntervention[0].length();p++)
                    {
                       
                        if(arRefIntervention[0].substring(p,p+1).equals(" "))
                        {
                            break;
                        }
                        
                        else
                        {
                            author=author+arRefIntervention[0].substring(p,p+1);
                        }
                    }
               System.out.println("in Author=0: "+arRefIntervention[0]+" author: "+author.replace("\"", "") +" 3:"+arRefIntervention[3]);
               
                stReference="REF-"+author.replace("\"", "")+"-"+arRefIntervention[3];
                stName = author.replace("\"", "")+" "+arRefIntervention[3];
                
                
                for(int w = 0;w<vAllReferencesIntervention.size();w++)   
                {
                     if(vAllReferencesIntervention.elementAt(w).toString().equals(stReference))
                     {
                         stReference= stReference+"a";
                         stName = stName+"a";
                     }
                }
                
                System.out.println("stName: "+stName+" st Ref: "+stReference);
                
                
                     Attr attr = doc.createAttribute("ID");
                     attr.setValue(stReference);
                     reference.setAttributeNode(attr);
                     
                     vAllReferencesIntervention.addElement("REF-"+author.replace("\"", "")+"-"+arRefIntervention[3]);
                      Attr attr2 = doc.createAttribute("NAME");
                     attr2.setValue(stName);
                     reference.setAttributeNode(attr2);
                     
                     
                     Attr attr3 = doc.createAttribute("TYPE");
                   /*  if(arRefIntervention[0].equalsIgnoreCase("Conference proceedings"))
                     {
                         type = "CONFERENCE_PROC";
                     }
                     else if(arAllRefCondition[0].equalsIgnoreCase("Journal article"))
                     {
                         type = "JOURNAL_ARTICLE";
                     }
                     else if(arAllRefCondition[0].equalsIgnoreCase("Section of Book")||arAllRefCondition[0].equalsIgnoreCase("Book"))
                     {
                         type = "BOOK_SECTION";
                     }
                      else if(arAllRefCondition[0].equalsIgnoreCase("Other"))
                     {
                         type = "OTHER";
                     }                     
                     */
                     attr3.setValue("OTHER");
                     reference.setAttributeNode(attr3);
                     
                     
                                         
                    
                      if(!arRefIntervention[0].trim().equals(""))
                      {
                          Element au = doc.createElement("AU");
                          au.appendChild(doc.createTextNode(arRefIntervention[0].trim().replace("\"", "")));
                          reference.appendChild(au);
                      }
                      if(!arRefIntervention[1].trim().equals(""))
                      {
                          Element ti = doc.createElement("TI");
                          ti.appendChild(doc.createTextNode(arRefIntervention[1].trim()));
                          reference.appendChild(ti);
                      }
                       
                     if(!arRefIntervention[2].trim().equals(""))
                      {
                          Element so = doc.createElement("SO");
                          so.appendChild(doc.createTextNode(arRefIntervention[2].trim()));
                          reference.appendChild(so);
                      }
                       if(arRefIntervention[3].trim().equals(""))
                      {
                          Element yr = doc.createElement("YR");
                          yr.appendChild(doc.createTextNode(arRefIntervention[3].trim()));
                          reference.appendChild(yr);
                      }
                      
                      if(!arRefIntervention[4].trim().equals(""))
                      {
                          Element vl = doc.createElement("VL");
                          vl.appendChild(doc.createTextNode(arRefIntervention[4].trim()));
                          reference.appendChild(vl);
                      }
                     
                       if(!arRefIntervention[5].trim().equals(""))
                      {
                          Element pg = doc.createElement("PG");
                          pg.appendChild(doc.createTextNode(arRefIntervention[5].trim()));
                          reference.appendChild(pg);
                      }
                       
                   
                               Element identifier = doc.createElement("IDENTIFIERS");
                               reference.appendChild(identifier);
                               System.out.println("in else identifiers");
                        
                   
                }
            }
                    
           
            
            
        }
        
        try
        {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(path));
            transformer.transform(source, result); 
            
            cleaner.deleteSpecialChars(path);
            System.out.println("Done");   
            JOptionPane.showMessageDialog(this, "The text was added successfully to your RevMan File","Clue", JOptionPane.WARNING_MESSAGE);  
            pressed1=true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
        }
        
        
        } 
        else
        {
            JOptionPane.showMessageDialog(this, "You can only press the button once.","Clue", JOptionPane.WARNING_MESSAGE);  
        }
        
        btnAddLeft.setEnabled(false);
    }//GEN-LAST:event_btnAddLeftMouseClicked

    private void btnEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseClicked
        
        
        openCsv = new File(pathCSV);

      Desktop openCsv1 = null;
      if (Desktop.isDesktopSupported())
       openCsv1 = Desktop.getDesktop();
        try 
        {
            openCsv1.open(openCsv);
        }
        catch(Exception e)
        {
         
             final JOptionPane pane = new JOptionPane("Error in opening the CSV file! Error message: "+e.toString());
             final JDialog d = pane.createDialog(null, "ERROR");
             d.setLocation(450, 430);
             d.setVisible(true);
        }
            
            
            
            /*
            
            System.out.println("sb: "+sbWholeLineLeftWithSemicolonDrugTwo.toString());
            
            if (sbWholeLineLeftWithSemicolonDrugTwo.toString().isEmpty()) {
            
            if (firstTime == true) {
            FrameEditText edit = new FrameEditText(sbWholeLineLeftWithSemicolonDrugOne.toString(), sbWholeLineRightWithSemicolon.toString(), this, path,activateMethods);
            edit.setVisible(true);
            edit.validate();
            firstTime = false;
            } else {
            FrameEditText edit = new FrameEditText(taLeft.getText(), sbWholeLineRightWithSemicolon.toString(), this, path,activateMethods);
            edit.setVisible(true);
            edit.validate();
            
            }
            } else {
            
            FrameEditTextTwoDrugs edit = new FrameEditTextTwoDrugs(sbWholeLineLeftWithSemicolonDrugOne.toString(), sbWholeLineLeftWithSemicolonDrugTwo.toString(), sbWholeLineRightWithSemicolon.toString(), this, path,activateMethods);
            edit.setVisible(true);
            edit.validate();
            firstTime = false;

            }
            */
       
    }//GEN-LAST:event_btnEditMouseClicked

    private void btnAddRightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddRightMouseClicked
       
        if(taRight.getText().isEmpty())
        {
             final JOptionPane pane = new JOptionPane("There is no text that could be added!");
             final JDialog d = pane.createDialog(null, "ERROR");
             d.setLocation(450, 430);
             d.setVisible(true);
        }
        else if(pressed2 == false)
        {    
            
        String stTextCleanRight = taRight.getText().toString().replaceAll(";", "");
        Vector vAllReferencesCondition = new Vector();
        String stReference="";
        String stName="";
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Date currentTime = new Date();

        
        Document doc = getDocument(path);
        Node intervention = doc.getElementsByTagName("CONDITION").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
        
        paragraph = doc.createElement("P");   // ADD TEXT (TEXT CAN ONLY BE ADDED IN P; MARKER IS PART OF PARAGRAPG3; PARAGRAPH3 IS PART OF INTERVENTION; INTERVENTION IS MAIN NODE)    
        Element marker = doc.createElement("MARKER");   // MARKER IS NEEDED TO ADD TEXT)
        marker.appendChild(doc.createTextNode("*------ Start of HAL generated text " + formatter.format(currentTime) + " ------* "));
        paragraph.appendChild(marker);
        intervention.appendChild(paragraph);
        
         paragraph = doc.createElement("P");
        paragraph.appendChild(doc.createTextNode(stTextCleanRight));
        intervention.appendChild(paragraph);
        
        paragraph = doc.createElement("P");
        Element marker2 = doc.createElement("MARKER");
        marker2.appendChild(doc.createTextNode("*--- End of HAL generated text " + formatter.format(currentTime) + " ---*"));
        paragraph.appendChild(marker2);    
        intervention.appendChild(paragraph); 
        
        
         
                String author="";
                String type ="";
                boolean checkIdentifier = false;
                 Node tag = doc.getElementsByTagName("ADDITIONAL_REFERENCES").item(0);
                
                
                
                
                for(int u=0;u<vRefCondition.size();u++)
                {
                    String [] arAllRefCondition = vRefCondition.elementAt(u).toString().split("~");
                    Element reference = doc.createElement("REFERENCE");
                    author="";
                    
                    
                 
                    for(int ue=0;ue<arAllRefCondition.length;ue++)
                {
                       System.out.println("arAll: "+arAllRefCondition[ue]);
                }
                
                tag.appendChild(reference);
                
               
                 
                for(int p=0;p<arAllRefCondition[1].length();p++)
                    {
                        if(arAllRefCondition[1].substring(p,p+1).equals(" "))
                        {
                            break;
                        }
                        else
                        {
                            author=author+arAllRefCondition[1].substring(p,p+1);
                        }
                    }
               System.out.println("in ue=1: "+arAllRefCondition[1]);
               
                stReference="REF-"+author+"-"+arAllRefCondition[5];
                stName = author+" "+arAllRefCondition[5];
                
                
                for(int w = 0;w<vAllReferencesCondition.size();w++)   
                {
                     if(vAllReferencesCondition.elementAt(w).toString().equals(stReference))
                     {
                         stReference= stReference+"a";
                         stName = stName+"a";
                     }
                }
                
                System.out.println("stName: "+stName+" st Ref: "+stReference);
                
                
                     Attr attr = doc.createAttribute("ID");
                     attr.setValue(stReference);
                     reference.setAttributeNode(attr);
                     
                     vAllReferencesCondition.addElement("REF-"+author+"-"+arAllRefCondition[4]);
                      Attr attr2 = doc.createAttribute("NAME");
                     attr2.setValue(stName);
                     reference.setAttributeNode(attr2);
                     
                     Attr attr3 = doc.createAttribute("TYPE");
                     if(arAllRefCondition[0].equalsIgnoreCase("Conference proceedings"))
                     {
                         type = "CONFERENCE_PROC";
                     }
                     else if(arAllRefCondition[0].equalsIgnoreCase("Journal article"))
                     {
                         type = "JOURNAL_ARTICLE";
                     }
                     else if(arAllRefCondition[0].equalsIgnoreCase("Section of Book")||arAllRefCondition[0].equalsIgnoreCase("Book"))
                     {
                         type = "BOOK_SECTION";
                     }
                      else if(arAllRefCondition[0].equalsIgnoreCase("Other"))
                     {
                         type = "OTHER";
                     }                     
                     
                     attr3.setValue(type);
                     reference.setAttributeNode(attr3);
                     
                                         
                    
                      if(!arAllRefCondition[1].trim().equals("||"))
                      {
                          Element au = doc.createElement("AU");
                          au.appendChild(doc.createTextNode(arAllRefCondition[1].trim()));
                          reference.appendChild(au);
                      }
                      if(!arAllRefCondition[2].trim().equals("||"))
                      {
                          Element ti = doc.createElement("TI");
                          ti.appendChild(doc.createTextNode(arAllRefCondition[2].trim()));
                          reference.appendChild(ti);
                      }
                       if(!arAllRefCondition[3].trim().equals("||"))
                      {
                          Element to = doc.createElement("TO");
                          to.appendChild(doc.createTextNode(arAllRefCondition[3].trim()));
                          reference.appendChild(to);
                      }
                     if(!arAllRefCondition[4].trim().equals("||"))
                      {
                          Element so = doc.createElement("SO");
                          so.appendChild(doc.createTextNode(arAllRefCondition[4].trim()));
                          reference.appendChild(so);
                      }
                       if(!arAllRefCondition[5].trim().equals("||"))
                      {
                          Element yr = doc.createElement("YR");
                          yr.appendChild(doc.createTextNode(arAllRefCondition[5].trim()));
                          reference.appendChild(yr);
                      }
                       if(!arAllRefCondition[6].trim().equals("||"))
                      {
                          Element en = doc.createElement("EN");
                          en.appendChild(doc.createTextNode(arAllRefCondition[6].trim()));
                          reference.appendChild(en);
                      }
                    
                       if(!arAllRefCondition[7].trim().equals("||"))
                      {
                          Element pb = doc.createElement("PB");
                          pb.appendChild(doc.createTextNode(arAllRefCondition[7].trim()));
                          reference.appendChild(pb);
                      }
                         if(!arAllRefCondition[8].trim().equals("||"))
                      {
                          Element cy = doc.createElement("CY");
                          cy.appendChild(doc.createTextNode(arAllRefCondition[8].trim()));
                          reference.appendChild(cy);
                      }
                      if(!arAllRefCondition[9].trim().equals("||"))
                      {
                          Element vl = doc.createElement("VL");
                          vl.appendChild(doc.createTextNode(arAllRefCondition[9].trim()));
                          reference.appendChild(vl);
                      }
                       if(!arAllRefCondition[10].trim().equals("||"))
                      {
                          Element no = doc.createElement("NO");
                          no.appendChild(doc.createTextNode(arAllRefCondition[10].trim()));
                          reference.appendChild(no);
                      }
                       if(!arAllRefCondition[11].trim().equals("||"))
                      {
                          Element pg = doc.createElement("PG");
                          pg.appendChild(doc.createTextNode(arAllRefCondition[11].trim()));
                          reference.appendChild(pg);
                      }
                       if(!arAllRefCondition[12].trim().equals("||"))
                      {
                          Element ed = doc.createElement("ED");
                          ed.appendChild(doc.createTextNode(arAllRefCondition[12].trim()));
                          reference.appendChild(ed);
                      }
                       if(!arAllRefCondition[13].trim().equals("||"))
                      {
                          Element md = doc.createElement("MD");
                          md.appendChild(doc.createTextNode(arAllRefCondition[13].trim()));
                          reference.appendChild(md);
                      }
                      if(!arAllRefCondition[14].trim().equals("||"))
                      {
                          Element nt = doc.createElement("NT");
                          nt.appendChild(doc.createTextNode(arAllRefCondition[14].trim()));
                          reference.appendChild(nt);
                      }
                     
                    
                      if(!arAllRefCondition[15].trim().equals("||"))
                      {
                          Element identifiers = doc.createElement("IDENTIFIERS");
                          
                          Element identifier = doc.createElement("IDENTIFIER");
                          String typeID="";
                          
                          Attr attr4 = doc.createAttribute("TYPE");
                          Attr attr5 = doc.createAttribute("VALUE");                          
                          for (int p = 0; p < arAllRefCondition[15].length(); p++) 
                          {
                              if (arAllRefCondition[15].substring(p, p + 1).equals(" ")) 
                              {
                                  break;
                              } 
                              else 
                              {
                                  typeID = typeID + arAllRefCondition[15].substring(p, p + 1);
                                  
                              }
                          }
                          System.out.println("typeID: "+typeID);
                          
                          attr4.setValue(typeID);
                          attr5.setValue(arAllRefCondition[15].substring(typeID.length()+1, arAllRefCondition[15].length()));
                          identifier.setAttributeNode(attr4);
                          identifier.setAttributeNode(attr5);
                          identifiers.appendChild(identifier);
                          reference.appendChild(identifiers);
                          
                         
                      }
                      else
                           {
                               Element identifier = doc.createElement("IDENTIFIERS");
                               reference.appendChild(identifier);
                               System.out.println("in else identifiers");
                           }
                   
                     
                }
                
            
        
        
        
         try
        {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(path));
            transformer.transform(source, result); 
            
            cleaner.deleteSpecialChars(path);
            System.out.println("Done");            
            JOptionPane.showMessageDialog(this, "The text was added successfully to your RevMan File","Clue", JOptionPane.WARNING_MESSAGE); 
            pressed2=true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        }  
        else
        {
            JOptionPane.showMessageDialog(this, "You can only press the button once.","Clue", JOptionPane.WARNING_MESSAGE);      
                }
         
        btnAddRight.setEnabled(false);
    }//GEN-LAST:event_btnAddRightMouseClicked

    private void btnMethodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMethodsMouseClicked
        
        FrameMethods start = new FrameMethods(path);
        start.setVisible(true);
          start.validate();
            this.dispose();
        
        
    }//GEN-LAST:event_btnMethodsMouseClicked

    public void getText(String textLeft, String textRight)
    {        
        taLeft.setText(textLeft);
        taRight.setText(textRight);
    }
    
    public void run () 
    {
        
       taLeft.setEditable(false);
       taRight.setEditable(false);
       
            if(activateMethods==true)
            {
                btnMethods.setVisible(true);                
            }
            else
            {
                btnMethods.setVisible(false);
            }
           
             String filepath = path;            // REVMAN FILE
             Document doc = getDocument(filepath);
            
             Node title = doc.getElementsByTagName("TITLE").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
             String stTitle = title.getTextContent().toString();
             
             System.out.println("dinna "+ stTitle +" pfad "+path);
             
             tfTitle.setText(stTitle);
        
             try        
             {           

                    StringBuffer sbAllText = new StringBuffer();

                    pathCSV = System.getProperty("user.dir");
                                      

                   pathCSV = pathCSV +"\\drugsScalesConditionsReferencesCSV.csv";  //for final version!!!!
                    
                 //   pathCSV = pathCSV +"\\src\\revmanhalcochranemode\\drugsScalesConditionsReferencesCSV.csv"; 
                    
                    System.out.println("das ist pfad "+pathCSV);
                     Reader fr = new InputStreamReader(new FileInputStream(pathCSV), "UTF-8");
                    BufferedReader br = new BufferedReader(fr);

                    int counter = 0;
                    String newLine = br.readLine();

                    while(newLine!=null)
                    {
                        sbAllText.append(newLine);
                        System.out.println("line: "+counter+" "+newLine);
                        counter = counter+1;
                        newLine = br.readLine();
                    }

                    String [] arSpreadSheet = sbAllText.toString().split(";");
                    System.out.println("DJANGO " + counter);
                    br.close();

                    for(int m =0;m<arSpreadSheet.length;m++)
                    {
                     System.out.println("ARRAY " + arSpreadSheet[m]);
                    }
                    
                    sbWholeLineLeft = new StringBuffer();
                    sbWholeLineRight = new StringBuffer();

                    boolean afterFor=false;
                    boolean alreadyAdded=false;

                    String word ="";

                    for(int a=0;a<=tfTitle.getText().length();a++)
                    {
                        System.out.println("das ist word if: "+word +" "+a +" length "+tfTitle.getText().length());

                        if(a == tfTitle.getText().length() || tfTitle.getText().substring(a, a+1).equals(" "))
                        {

                            System.out.println("das ist word: "+word);

                            if(word.equalsIgnoreCase("for"))
                            {
                                afterFor=true;
                                word = "";
                            }
                            else
                            {
                                
                                if(afterFor == true)
                                 {                                                                          
                                   for (int i = 0; i < arSpreadSheet.length; i = i+32)
                                   {
                                       if(alreadyAdded == true)
                                       {
                                           break;
                                       }
                                       System.out.println("CONDITION 1: "+arSpreadSheet[i]);
                                       
                                       if(arSpreadSheet[i].trim().equalsIgnoreCase("ID_Con"))
                                       {
                                           
                                           System.out.println("CONDITION 2: "+arSpreadSheet[i]);
                                           
                                           for(int j =i+1;j<arSpreadSheet.length;j=j+32)
                                           {
                                            
                                            System.out.println("in j for loop and word: "+word+" array: "+arSpreadSheet[j]);
                                            
                                            if(arSpreadSheet[j].equals(" ") || arSpreadSheet[j].equals(""))
                                            {
                                                arSpreadSheet[j]="|||";
                                            }
                                            
                                               
                                            else if (word.trim().toLowerCase().contains(arSpreadSheet[j].toLowerCase()))
                                            {
                                                System.out.println("dinna! "+word+" spreadsheet "+arSpreadSheet[j]);
                                                sbWholeLineRightWithSemicolon.append(arSpreadSheet[j-1]+";");
                                                sbWholeLineRightWithSemicolon.append(arSpreadSheet[j]+";");
                                                for(int k =j+1;k<j+9;k++)
                                                {
                                                    sbWholeLineRight.append(arSpreadSheet[k]);
                                                    sbWholeLineRightWithSemicolon.append(arSpreadSheet[k]+";");
                                                   
                                                }
                                                
                                                alreadyAdded = true;
                                                sbWholeLineRightWithSemicolon.append(";;;;;;;;;;;;;;;;;;;;;;;");
                                                System.out.println("string buffer: "+sbWholeLineRightWithSemicolon.toString());
                                                
                                                StringBuffer sbRefCondition=new StringBuffer();
                                                
                                                int counterRef=0;
                                                
                                               // System.out.prinln("array, REF j: "+)
                                                
                                                
                                                boolean isEmpty=false;
                                                
                                                for(int l=j-1;l<arSpreadSheet.length;l=l+32)
                                                {
                                                       isEmpty=false;
                                                      
                                                      if(arSpreadSheet[l].length()>1 && arSpreadSheet[l].toLowerCase().equalsIgnoreCase("RT"))
                                                        {
                                                            checkReferences=true;
                                                        }
                                                      System.out.println("array, REF l: "+arSpreadSheet[l].toLowerCase()+" word "+word+" checkRef "+checkReferences);
                                                      
                                                      if(arSpreadSheet[l].equals(" ") || arSpreadSheet[l].equals(""))
                                                    {
                                                        arSpreadSheet[l] = "|||";
                                                        isEmpty=true;
                                                    }
                                                      
                                                                     System.out.println("spread sheet, ausserhalb django: "+arSpreadSheet[l].toLowerCase() +" word: "+word.trim().toLowerCase()+" "+word.trim().toLowerCase().contains(arSpreadSheet[l-1].toLowerCase())+"is empty: "+isEmpty);                                    
                                                      if(word.trim().toLowerCase().contains(arSpreadSheet[l].toLowerCase()) && isEmpty==false)
                                                      {
                                                          System.out.println("spread sheet, in django: "+arSpreadSheet[l]);
                                                          
                                                          for(int m=l+33;m<arSpreadSheet.length;m++)
                                                          {
                                                              
                                                              System.out.println("in for loop: "+arSpreadSheet[m]);
                                                              
                                                              counterRef=counterRef+1;
                                                              
                                                              if(arSpreadSheet[m].isEmpty())
                                                              {
                                                                  sbRefCondition.append("||~");
                                                              }
                                                              else
                                                              {
                                                              sbRefCondition.append(arSpreadSheet[m]+"~");
                                                              }
                                                              if(counterRef==16)
                                                              {
                                                                  System.out.println("sbRef in %14: "+sbRefCondition.toString());
                                                                  vRefCondition.addElement(sbRefCondition.toString());
                                                                  sbRefCondition.delete(0, sbRefCondition.length());
                                                                  m=m+16;
                                                                  counterRef=0;
                                                                  
                                                                  if(arSpreadSheet[m].isEmpty())
                                                                  {
                                                                      break;
                                                                  }
                                                              }                                                             
                                                             
                                                              
                                                              
                                                          }
                                                         
                                                      }
                                                      
                                                }
                                            
                                                
                                                break;
                                        
                                            }
                                             
                                           //  System.out.println("sb right: "+sbWholeLineRight.toString());
                                             
                                           }
                                       }
                                //    System.out.println(i + " " + arSpreadSheet[i]);

                                    
                                    }
                                 }
                                
                                else
                                {
                                
                                for (int i = 34; i < arSpreadSheet.length; i = i + 32)
                                {
                                    System.out.println(i + " " + arSpreadSheet[i]);

                                    if (word.trim().equalsIgnoreCase(arSpreadSheet[i]))
                                    {

                                        for (int j = i; j < i + 28; j++)
                                        {
                                            if (afterFor == true)
                                            {                                                
                                                sbWholeLineRight.append(arSpreadSheet[j]);
                                            }
                                            else
                                            {
                                                System.out.println("in else schleife linke TA dinna");

                                                if(j==i+27)
                                                {
                                                    sbWholeLineLeft.append(arSpreadSheet[j]+"\n"+"\n");
                                                }
                                                else if (j == i)
                                                {
                                                                                                    
                                                    sbWholeLineLeft.append("Class/formula" + "\n");
                                                    sbWholeLineLeft.append(arSpreadSheet[j]);

                                                    if (nextDrug == false)
                                                    {
                                                        stPartOneOne = arSpreadSheet[j];
                                                    }
                                                    else
                                                    {
                                                        stPartOneTwo = arSpreadSheet[j];
                                                        
                                                    }
                                                    part1 = true;
                                                }
                                                else if (j == i + 18)
                                                {
                                                    part1 = false;
                                                    sbWholeLineLeft.append("\n" + "Mechanism/selected phrases" + "\n");
                                                    sbWholeLineLeft.append(arSpreadSheet[j] + "\n");
                                                   

                                                    if (nextDrug == false)
                                                    {
                                                        stPartTwoOne = arSpreadSheet[j];
                                                    }
                                                    else
                                                    {
                                                        stPartTwoTwo = arSpreadSheet[j];
                                                    }

                                                    part2 = true;

                                                }
                                                else if (j == i + 19)
                                                {
                                                    part2 = false;
                                                    sbWholeLineLeft.append("References to this 'intervention' text that may be useful have been added to 'References>Additional references>Classification pending' section. These references may not be perfect and will need checked. This yellow text, and the list below should be deleted once complete." + "\n");
                                                    sbWholeLineLeft.append(arSpreadSheet[j]);

                                                    if (nextDrug == false)
                                                    {
                                                        stPartThreeOne = arSpreadSheet[j+1];
                                                    }
                                                    else
                                                    {
                                                        stPartThreeTwo = arSpreadSheet[j+1];
                                                    }
                                                    part3 = true;
                                                }
                                                else
                                                {
                                                    if (nextDrug == false) {
                                                        if (part1 == true) {
                                                            stPartOneOne = stPartOneOne + arSpreadSheet[j];
                                                        } else if (part2 == true) {
                                                            stPartTwoOne = stPartTwoOne + arSpreadSheet[j];
                                                        } else if (part3 == true) {
                                                            stPartThreeOne = stPartThreeOne + arSpreadSheet[j+1];
                                                        }
                                                    }

                                                    if(nextDrug==true)
                                                    {
                                                        if (part1 == true) {
                                                            stPartOneTwo = stPartOneTwo + arSpreadSheet[j];
                                                        } else if (part2 == true) {
                                                            stPartTwoTwo = stPartTwoTwo + arSpreadSheet[j];
                                                        } else if (part3 == true) {
                                                            stPartThreeTwo = stPartThreeTwo + arSpreadSheet[j+1];
                                                        }

                                                    }

                                                    sbWholeLineLeft.append(arSpreadSheet[j]);
                                                    
                                                    
                                                }
                                                
                                                

                                            }
                                            
                                            if(nextDrug==false)
                                            {
                                               sbWholeLineLeftWithSemicolonDrugOne.append(arSpreadSheet[j]+";"); 
                                               
                                            }
                                            else if (nextDrug==true)
                                            {
                                                sbWholeLineLeftWithSemicolonDrugTwo.append(arSpreadSheet[j]+";");
                                            }
                                            
                                            if(j==i+27)
                                            {
                                                System.out.println("in next drug true dinna");
                                                nextDrug=true;
                                                vRefIntervention.add(arSpreadSheet[i+19]);
                                            }
                                            
                                            
                                           
                                           
                                        
                                    }

                                        System.out.println("sbWholeLine left: " + sbWholeLineLeft.toString() + " "
                                            + "wholeLine right " + sbWholeLineRight.toString());

                                    }

                                }
                                }
                            }
                            if(afterFor == true)
                            {
                             word = word+" ";
                            }
                            else
                            {
                                 word="";
                            }
                            
                           

                        }
                        else
                        {
                            word=word+tfTitle.getText().substring(a,a+1);
                        }

                    }
                    

                    taLeft.setText(sbWholeLineLeft.toString());
                    taRight.setText(sbWholeLineRight.toString());
                    taLeft.setCaretPosition(0);
                    taRight.setCaretPosition(0);
                    
                    for(int h=0;h<vRefIntervention.size();h++)
                    {
                        System.out.println("RefIntervention: "+vRefIntervention.elementAt(h).toString());
                    }
                    
                      
        String bla;
        String bla2;
             
        try
        {
           bla = new String(taLeft.getText().getBytes(),"ISO-8859-1");
           bla2 = new String(taRight.getText().getBytes(),"ISO-8859-1");
           taLeft.setText(bla);
           taRight.setText(bla2);
       
        }
        catch(Exception e)
        {
            
        }
                   
                    if(taLeft.getText().equals("")&&taRight.getText().equals(""))
                    {
                        JOptionPane.showMessageDialog(this, "There are no entries in the csv-file which are appropriate to this title.","Clue", JOptionPane.WARNING_MESSAGE); 
                    }
                    else if(taLeft.getText().equals(""))
                    {
                        JOptionPane.showMessageDialog(this, "There are no interventions in the csv-file which are appropriate to this title.","Clue", JOptionPane.WARNING_MESSAGE); 
                    }
                    else if(taRight.getText().equals(""))
                    {
                        JOptionPane.showMessageDialog(this, "There are no conditions in the csv-file which are appropriate to this title.","Clue", JOptionPane.WARNING_MESSAGE); 
                    }
                    
        }
        catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error! Error message: "+e.toString(),"ERROR", JOptionPane.WARNING_MESSAGE);
        }
   
    }
    
    
     private static Document getDocument(String file) 
    {
        try 
        {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(file);
        } 
        catch (Exception e) 
        {
            return null;
        }
    }
       protected void processWindowEvent(WindowEvent e)             // for pressing the "x" in the top right corner
 {
        if(e.getID()==WindowEvent.WINDOW_CLOSING)
  {

  if(JOptionPane.showConfirmDialog(null, "<html><body>Do you really want to close the program?<body><html>"   
     , "WARNING",
     JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
   {
    super.processWindowEvent(e);
                                System.exit(0);
                        }
                }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLeft;
    private javax.swing.JButton btnAddRight;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMethods;
    private javax.swing.JButton btn_return;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taLeft;
    private javax.swing.JTextArea taRight;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
