/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package revmanhalcochranemode;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.channels.FileChannel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.
        TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author msash9
 */
public class FrameProtocolToReview extends javax.swing.JFrame {

    
     private String path;
    private Vector vAllReferences = new Vector();
    private Complex1 cleaner = new Complex1(null);
    private boolean noChild = true;
    private boolean tagAppend = false;
    private Element subsectionTemp;
    private Element paragraphTemp;
    private Element boldTemp;
    private Element headingTemp;
    private Element headingTemp2;
    private Element italicTemp;
    private Element subsectionTemp2;
    private String tempCond="";
    private String tempTheo="";
    private String tempInter="";
    private String tempImpo="";
    private String tempAlloc = "";
    private String tempBlind = "";
    private String tempExclu = "";
    private String tempSelect = "";
    private String tempOther = "";
    
    
    
    private File openTextfile;
    private boolean firstTime=false;
    private boolean specialCase=false;
    private boolean btnPressed=false;
    
    private String pathTXT =""; 
    /**
     * Creates new form FrameProtocolToReview
     */
    public FrameProtocolToReview(String p) {
        initComponents();        
        this.setTitle("RevMan Hal - Protocol to Review");
        jPanel1.setBackground(new Color(226,226,226));
        this.setBackground(new Color(226,226,226));
        path=p;
        this.setLocation(300, 150);
        this.run();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btn_return1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taText1 = new javax.swing.JTextArea();
        btnOpen1 = new javax.swing.JButton();
        btnAdd1 = new javax.swing.JButton();
        btnRefresh1 = new javax.swing.JButton();
        btn_exit1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(726, 631));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/hal.png"))); // NOI18N

        btn_return1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/back.png"))); // NOI18N
        btn_return1.setText(" BACK");
        btn_return1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_return1MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 33)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 249));
        jLabel6.setText("RevMan HAL ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel7.setText("Protocol to review");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("<html><body>In this frame you are able to add the 'Protocol-to-Review'-text to your RevMan file. You can see the text which will be added in the text area below. If you want to change anything press on 'Open Textfile' and edit the file like you want. After saving the file you just need to press 'Refresh' and the text will be reloaded.</body></html>");

        taText1.setColumns(20);
        taText1.setRows(5);
        jScrollPane2.setViewportView(taText1);

        btnOpen1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnOpen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/TxtFileSmall.png"))); // NOI18N
        btnOpen1.setText("Open Textfile");
        btnOpen1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen1MouseClicked(evt);
            }
        });

        btnAdd1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/AddBtnSmall.png"))); // NOI18N
        btnAdd1.setText(" ADD");
        btnAdd1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAdd1MouseClicked(evt);
            }
        });

        btnRefresh1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRefresh1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/refreshSmall.png"))); // NOI18N
        btnRefresh1.setText("Refresh");
        btnRefresh1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefresh1MouseClicked(evt);
            }
        });

        btn_exit1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_exit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/exit.png"))); // NOI18N
        btn_exit1.setText("EXIT");
        btn_exit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_exit1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOpen1)
                        .addGap(30, 30, 30)
                        .addComponent(btnRefresh1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_return1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(144, 144, 144)
                                .addComponent(btnAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_exit1))
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addGap(50, 50, 50))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_return1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_exit1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_return1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_return1MouseClicked
        // TODO add your handling code here:
         this.dispose();
        FrameStart frame = new FrameStart(path,null);
        frame.setVisible(true);
        frame.validate();

    }//GEN-LAST:event_btn_return1MouseClicked

    private void btnOpen1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpen1MouseClicked

        File openTXT = new File(pathTXT);

        Desktop openTXT2 = null;
        if (Desktop.isDesktopSupported()) {
            openTXT2 = Desktop.getDesktop();
        }
        try {
            openTXT2.open(openTXT);
        } catch (Exception e) {
            final JOptionPane pane = new JOptionPane("Error in opening the .txt file! Error message: "+e.toString());
             final JDialog d = pane.createDialog(null, "ERROR");
             d.setLocation(450, 430);
             d.setVisible(true);
        }

    }//GEN-LAST:event_btnOpen1MouseClicked

    private void btnAdd1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAdd1MouseClicked

        if(btnPressed==true)
        {
             JOptionPane.showMessageDialog(this, "You can only press the button once","Clue", JOptionPane.WARNING_MESSAGE);  
        }
         if(taText1.getText().isEmpty())
        {
        
        }
         else if (btnPressed=false);
        {
        
       if(JOptionPane.showConfirmDialog(null, "<html><body>Do you want to create a backup?<body><html>"   
        , "CLUE",
         JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            Backup b = new Backup(path,"ProtocolToReview");
            b.main();
        }
          btnPressed=true;
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Date currentTime = new Date();

        String filepath = path;            // REVMAN FILE
        Document doc = getDocument(filepath);

        String[] arAllText = taText1.getText().toString().split("\n");

        Node tag = null;
        Node one = null;
     //   Node two = doc.getElementsByTagName("CRIT_OUTCOMES_SECONDARY").item(0);
        boolean secondSubsection;
        boolean addingParagraphAtTheEnd=false;
        boolean addingParagraphAtTheEnd2=false;
        boolean inContrib =false;
        Element table = doc.createElement("TABLE");
        Element trTemp = doc.createElement("TR");
        Element tdTemp = doc.createElement("TD");
        
        boolean checkTd = false;

        System.out.println("in add, vor for");

        for (int m = 0; m <arAllText.length ; m++)
        {
            secondSubsection = false;

            if(arAllText[m].trim().isEmpty())
            {

            }
            else
            {

                System.out.println("text, array: "+m +" "+ arAllText[m]+" boolean "+firstTime);
                try
                {
                    System.out.println("sub: "+arAllText[m].trim().substring(4,arAllText[m].length()-4).trim());
                }
                catch(Exception e)
                {

                }
                //           System.out.println("sub: "+arAllText[m].trim().substring(4,arAllText[m].length()-4).trim());

                System.out.println(m+ " after the catch");
                
                if(addingParagraphAtTheEnd==true)
                {
                    Element paragraph = doc.createElement("P");
                    Element alloc = doc.createElement("ALLOCATION");
                    if(!tempAlloc.isEmpty())
                    {                    
                    paragraph.appendChild(doc.createTextNode(tempAlloc));
                    alloc.appendChild(paragraph);
                    }
                    
                    Element blind= doc.createElement("BLINDING");
                    if(!tempBlind.isEmpty())
                    {                
                    paragraph = doc.createElement("P");
                    paragraph.appendChild(doc.createTextNode(tempBlind));
                    blind.appendChild(paragraph);
                    }
                    
                    Element exclu = doc.createElement("EXCLUSIONS");
                    if(!tempExclu.isEmpty())
                    {                
                    paragraph = doc.createElement("P");
                    paragraph.appendChild(doc.createTextNode(tempExclu));
                    exclu.appendChild(paragraph);  
                    }
                    Element select = doc.createElement("SELECTIVE_REPORTING");
                    if(!tempSelect.isEmpty())
                    {                
                    paragraph = doc.createElement("P");
                    paragraph.appendChild(doc.createTextNode(tempSelect));
                    select.appendChild(paragraph);
                    }
                    Element other = doc.createElement("OTHER_BIAS_SOURCES");
                    if(!tempOther.isEmpty())
                    {                
                    paragraph = doc.createElement("P");
                    paragraph.appendChild(doc.createTextNode(tempOther));
                    other.appendChild(paragraph);        
                    }
                    
                    tag.appendChild(alloc);
                    tag.appendChild(blind);
                    tag.appendChild(exclu);
                    tag.appendChild(select);
                    tag.appendChild(other);
                    
                    addingParagraphAtTheEnd=false;
                    
                }
                if(addingParagraphAtTheEnd2==true)
                {
                        Element paragraph = doc.createElement("P");
                        Element cond =doc.createElement("CONDITION");
                        
                        if(!tempCond.isEmpty())
                        {
                        paragraph.appendChild(doc.createTextNode(tempCond));
                        cond.appendChild(paragraph);  
                        }
                              
                        Element inter = doc.createElement("INTERVENTION");
                        if(!tempInter.isEmpty())
                        {
                        paragraph = doc.createElement("P");
                        paragraph.appendChild(doc.createTextNode(tempInter));
                        inter.appendChild(paragraph); 
                        }
                        Element theo = doc.createElement("THEORY");
                        if(!tempTheo.isEmpty())
                        {
                        paragraph = doc.createElement("P");
                        paragraph.appendChild(doc.createTextNode(tempTheo));
                        theo.appendChild(paragraph);  
                        }
                        Element impo = doc.createElement("IMPORTANCE");
                        if(!tempImpo.isEmpty())
                        {
                        paragraph = doc.createElement("P");
                        paragraph.appendChild(doc.createTextNode(tempImpo));
                        impo.appendChild(paragraph);        
                        }
                    tag.appendChild(cond);
                    tag.appendChild(inter);
                    tag.appendChild(theo);
                    tag.appendChild(impo);                    
                    
                    addingParagraphAtTheEnd2=false;
                    
                }
                
                if(arAllText[m].trim().length()>8)
                {

                   
                if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Abstract")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Abstract"))
                {
                    m=m+1;
                    tag= doc.getElementsByTagName("ABS_BACKGROUND").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    firstTime = true;

                }

                else if(firstTime = true && (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Objectives")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Objectives")))
                {
                    tag = doc.getElementsByTagName("ABS_OBJECTIVES").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    firstTime=false;
                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Search methods")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Search methods"))
                {
                    tag = doc.getElementsByTagName("ABS_SEARCH_STRATEGY").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Selection criteria")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Selection criteria"))
                {
                    tag = doc.getElementsByTagName("ABS_SELECTION_CRITERIA").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis"))
                {
                    tag = doc.getElementsByTagName("ABS_DATA_COLLECTION").item(0);   //SEE EXAMPLE...
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Main results")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Main results"))
                {
                    tag = doc.getElementsByTagName("ABS_RESULTS").item(0);   //All relevant randomised...
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Authors' conclusions")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Authors' conclusions"))
                {

                    tag = doc.getElementsByTagName("ABS_CONCLUSIONS").item(0);   //Adults, however
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Plain language summary")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Plain language summary"))
                {
                    m=m+1;
                    tag= doc.getElementsByTagName("TITLE").item(1);                    
                  //  System.out.println("this is one: "+one.toString()+" children: "+one.getFirstChild().toString()+" last: "+one.getLastChild().toString());
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    firstTime = true;
                }
                else if(arAllText[m-2].trim().length()> 8 && (arAllText[m-2].trim().substring(4,arAllText[m-2].length()-4).trim().equalsIgnoreCase("Plain language summary")
                    ||arAllText[m-2].trim().substring(5,arAllText[m-2].length()-4).trim().equalsIgnoreCase("Plain language summary")))
                {
                    System.out.println("in else if true dinna m "+m);                    
                    tag = doc.getElementsByTagName("P").item(0);
                    
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    firstTime = false;
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Background")
                        ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Background") )
                    {
                        System.out.println("in background!");
                        tag= doc.getElementsByTagName("BACKGROUND").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
                        tagAppend = true;
                        m=m+1;
                        try
                        {
                            Element child = (Element)tag.getLastChild();
                        }
                        catch(Exception e)
                        {
                            noChild = true;
                        } 
                        
                        Node cond = doc.getElementsByTagName("CONDITION").item(0);
                        Node inter = doc.getElementsByTagName("INTERVENTION").item(0);
                        Node theo = doc.getElementsByTagName("THEORY").item(0);
                        Node impo = doc.getElementsByTagName("IMPORTANCE").item(0);
                      //  Node test = tag.getFirstChild();
                      //  tag.removeChild(test);
                        tempCond = cond.getTextContent();
                        tempInter =inter.getTextContent();
                        tempTheo =theo.getTextContent();
                        tempImpo =impo.getTextContent();
                        
                        tag.removeChild(cond);
                        tag.removeChild(inter);
                        tag.removeChild(theo);
                        tag.removeChild(impo);

                        subsectionTemp = doc.createElement("SUBSECTION");
                        subsectionTemp2 = doc.createElement("SUBSECTION");
                        paragraphTemp = doc.createElement("PARAGRAPH");
                        headingTemp = doc.createElement("HEADING");
                        headingTemp2 = doc.createElement("HEADING");
                        italicTemp = doc.createElement("ITALIC");
                        addingParagraphAtTheEnd2=true;

                    }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis"))
                {

                    tag = doc.getElementsByTagName("DATA_COLLECTION").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Results of the search")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Results of the search"))
                {

                    tag = doc.getElementsByTagName("SEARCH_RESULTS").item(0);   //All outcomes will...                    
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Included studies")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Included studies"))
                {
                    specialCase=true;
                    tag = doc.getElementsByTagName("INCLUDED_STUDIES_DESCR").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Excluded studies")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Excluded studies"))
                {
                    specialCase=false;
                    tag = doc.getElementsByTagName("EXCLUDED_STUDIES_DESCR").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Risk of bias in included studies")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Risk of bias in included studies"))
                {
                    m=m+1;
                    tag = doc.getElementsByTagName("STUDY_QUALITY").item(0);   //LEAVE BLANK FOR..
                    System.out.println("in delete dinna");
                    
                    Node alloc = doc.getElementsByTagName("ALLOCATION").item(0);
                    Node blind = doc.getElementsByTagName("BLINDING").item(0);
                    Node exclu = doc.getElementsByTagName("EXCLUSIONS").item(0);
                    Node select = doc.getElementsByTagName("SELECTIVE_REPORTING").item(0);
                    Node other = doc.getElementsByTagName("OTHER_BIAS_SOURCES").item(0);   
                    
                    
                    tempAlloc = alloc.getTextContent();
                    tempBlind = blind.getTextContent();
                    tempExclu = exclu.getTextContent();
                    tempSelect = select.getTextContent();
                    tempOther = other.getTextContent();
                    
                    tag.removeChild(alloc);
                    tag.removeChild(blind);
                    tag.removeChild(exclu);
                    tag.removeChild(select);
                    tag.removeChild(other);                    
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    addingParagraphAtTheEnd=true;
                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Allocation (selection bias)")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Allocation (selection bias)"))
                {

                    tag = doc.getElementsByTagName("ALLOCATION").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Blinding (performance bias and detection bias)")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Blinding (performance bias and detection bias)"))// MUST BE COMPLETED..
                {
                     tag = doc.getElementsByTagName("BLINDING").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }
                else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Incomplete outcome data (attrition bias)")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Incomplete outcome data (attrition bias)"))// MUST BE COMPLETED..
                {
                   
                    tag = doc.getElementsByTagName("EXCLUSIONS").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Selective reporting (reporting bias)")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Selective reporting (reporting bias)"))// Assessment of risk...
                {

                    tag = doc.getElementsByTagName("SELECTIVE_REPORTING").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Other potential sources of bias")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Other potential sources of bias"))// measures of treatment...
                {

                    tag = doc.getElementsByTagName("OTHER_BIAS_SOURCES").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }
                else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Effects of interventions")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Effects of interventions"))// unit of analsis...
                {

                    tag = doc.getElementsByTagName("INTERVENTION_EFFECTS").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Summary of main results")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Summary of main results"))// dealing with missing data...
                {

                    tag = doc.getElementsByTagName("SUMMARY_OF_RESULTS").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Overall completeness and applicability of evidence")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Overall completeness and applicability of evidence"))// assessment of heterogeneity...
                {

                    tag = doc.getElementsByTagName("APPLICABILITY_OF_FINDINGS").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Quality of the evidence")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Quality of the evidence"))// MUST BE COMPLETED..
                {
                    tag = doc.getElementsByTagName("QUALITY_OF_EVIDENCE").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Potential biases in the review process")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Potential biases in the review process"))// MUST BE COMPLETED..
                {
                    tag = doc.getElementsByTagName("POTENTIAL_BIASES").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");

                } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Agreements and disagreements with other studies or reviews")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Agreements and disagreements with other studies or reviews"))// MUST BE COMPLETED..
                {
                    tag = doc.getElementsByTagName("AGREEMENT").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                // .. bennys code end

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Implications for practice")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Implications for practice"))
                {

                    tag = doc.getElementsByTagName("IMPLICATIONS_PRACTICE").item(0);
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Implications for research")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Implications for research"))
                {
                    tag = doc.getElementsByTagName("IMPLICATIONS_RESEARCH").item(0);   //We understand that...
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Contributions of authors")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Contributions of authors"))
                {

                       inContrib=true;
                        tag = doc.getElementsByTagName("CONTRIBUTIONS").item(0);
                        
                        subsectionTemp = doc.createElement("SUBSECTION");
                        subsectionTemp2 = doc.createElement("SUBSECTION");
                        paragraphTemp = doc.createElement("PARAGRAPH");
                        headingTemp = doc.createElement("HEADING");
                        headingTemp2 = doc.createElement("HEADING");
                        italicTemp = doc.createElement("ITALIC");
                        
                        tagAppend = true;
                    
                }

                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Differences between protocol and review")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Differences between protocol and review"))
                {
                    tag = doc.getElementsByTagName("PRO_REV_DIFF").item(0);
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    tagAppend = true;

                }
                else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Additional tables")
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Additional tables"))
                {
                    tag = doc.getElementsByTagName("ADDITIONAL_TABLES").item(0);
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
                    tagAppend = true;
                    Element addTable = doc.createElement("ADDITIONAL_TABLE");
                    Attr attr1 = doc.createAttribute("ID");
                    Attr attr2 = doc.createAttribute("NO");
                    attr1.setValue("TBL-05");
                    attr2.setValue("01");
                    addTable.setAttributeNode(attr1);
                    addTable.setAttributeNode(attr2);
                    Element title = doc.createElement("TITLE");
                    
                    table = doc.createElement("TABLE");
                    title.appendChild(doc.createTextNode(arAllText[m+1].substring(3,arAllText[m+1].length())));
                    addTable.appendChild(title);
                    
                    Attr attrCols=doc.createAttribute("COLS");
                    Attr attrRows=doc.createAttribute("ROWS");
                    attrCols.setValue("2");
                    attrRows.setValue("5");
                    table.setAttributeNode(attrCols);
                    table.setAttributeNode(attrRows);                    
                    addTable.appendChild(table);                    
                    tag.appendChild(addTable);
                }

            }

           try
            {
                Element child = (Element)tag.getLastChild();
                if(child.getTextContent().toString().equals(""))
                {
                    noChild = true;
                }
            }
            catch(Exception e)
            {
                noChild = true;
            }

//            System.out.println("This is tag: "+tag.toString() + " "+m +" sub: "+arAllText[m].trim().substring(0,2));

            
             if(arAllText[m].trim().substring(0, 2).equals("LR"))
            {
                Element link = doc.createElement("LINK");
                Attr attrLink1 = doc.createAttribute("REF");
                Attr attrLink2 = doc.createAttribute("TYPE");
                String stAttrLink1 = arAllText[m].substring(3,arAllText[m].length()).replaceAll(" ", "-");
                attrLink1.setValue("REF-" + stAttrLink1);
                attrLink2.setValue("REFERENCE");
                link.setAttributeNode(attrLink1);
                link.setAttributeNode(attrLink2);
                link.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                paragraphTemp.appendChild(link);
            }
            else if(arAllText[m].trim().substring(0, 2).equals("LI"))
            {
                Element link3 = doc.createElement("A");
                Attr attrLink4 = doc.createAttribute("HREF");
                attrLink4.setValue(arAllText[m].substring(arAllText[m].toString().indexOf(":")+1,arAllText[m].toString().length()).trim());
                link3.setAttributeNode(attrLink4);
                link3.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].toString().indexOf(":"))));
                paragraphTemp.appendChild(link3);
            }

            else if(arAllText[m].trim().substring(0, 2).equals("!!"))
            {
                Element link = doc.createElement("LINK");
                Attr attrLink5 = doc.createAttribute("TAG");
                Attr attrLink6 = doc.createAttribute("TYPE");
                attrLink5.setValue("SUBGROUP_ANALYSIS");
                attrLink6.setValue("SECTION");
                link.setAttributeNode(attrLink5);
                link.setAttributeNode(attrLink6);

                link.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                paragraphTemp.appendChild(link);
            }
         
            else if(arAllText[m].trim().substring(0, 2).equals("C1"))
            {
                Element tr = doc.createElement("TR");
                table.appendChild(tr);
                Element td = doc.createElement("TD");
                tr.appendChild(td);
                Element paragraph = doc.createElement("P");
                Element bold = doc.createElement("B");
                bold.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                paragraph.appendChild(bold);
                td.appendChild(paragraph);
                trTemp = tr;
                checkTd = true;
                
            }
            else if(arAllText[m].trim().substring(0, 2).equals("C2"))
            {
                if(checkTd == true)
                {
                    Element td = doc.createElement("TD");
                    trTemp.appendChild(td);
                    Element para = doc.createElement("P");
                    para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    td.appendChild(para);
                    tdTemp = td;
                    checkTd = false;
                }
                else
                {
                    Element para = doc.createElement("P");
                    para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    tdTemp.appendChild(para);
                }
                 
                 
            }
            else if(arAllText[m].trim().substring(0, 2).equals("II"))
            {
                Element italic = doc.createElement("I");
                italic.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length())));
                italicTemp = italic;
                paragraphTemp.appendChild(italic);
            }
            else if(arAllText[m].trim().substring(0, 2).equals("PP"))
            {
                if(noChild == true)
                {
                    Element para = doc.createElement("P");
                    para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    System.out.println("this is tag: "+tag.toString());
                    tag.appendChild(para);

                    paragraphTemp = para;
                    noChild = false;
                }
                else
                {
                    int temp=0;
                    int temp2=0;
                    
                    
                   
                    try
                    {
                         temp = Integer.parseInt(headingTemp.getAttribute("LEVEL"));
                         temp2 =Integer.parseInt(headingTemp2.getAttribute("LEVEL"));

                        System.out.println("levels subs: "+ temp +" "+temp2);

                        if(temp2>temp )
                        {
                            secondSubsection = true;
                        }

                    }
                    catch(Exception e)
                    {
                        secondSubsection = false;
                    }
                    if(secondSubsection==true)
                    {
                        System.out.println("headingTemp: "+headingTemp.getTextContent().toString()+" array: "+arAllText[m-1]);
                       if(arAllText[m-1].substring(3,6).equals("6. "))
                       {
                           System.out.println("in special case dinna");
                             Element para = doc.createElement("P");
                           para.appendChild(doc.createTextNode(arAllText[m].substring(3, arAllText[m].length())));
                           subsectionTemp.appendChild(para);
                           paragraphTemp = para;
                           
                       }
                       else if(arAllText[m-1].contains("Publication bias"))
                       {
                            System.out.println("in special case dinna");
                             Element para = doc.createElement("P");
                            para.appendChild(doc.createTextNode(arAllText[m].substring(3, arAllText[m].length())));
                            subsectionTemp.appendChild(para);
                            paragraphTemp = para;
                       }
                       else
                       {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        subsectionTemp2.appendChild(para);
                        paragraphTemp = para;
                       }
                    }
                    else if(inContrib==true)
                    {
                        inContrib=false;
                        Element br = doc.createElement("BR");
                        String tempCont = tag.getTextContent();
                        tag.removeChild(tag.getFirstChild());
                        Element paragraph = doc.createElement("P");
                        paragraph.appendChild(doc.createTextNode(tempCont));
                        paragraph.appendChild(br);
                        paragraph.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        tag.appendChild(paragraph);
                        
                        
                    }
                    
                    else if(arAllText[m-1].trim().substring(0, 1).equalsIgnoreCase("H"))
                    {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        subsectionTemp.appendChild(para);
                        paragraphTemp = para;
                    }
                    else if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("PP") || arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("SP")  )
                    {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                        System.out.println("subsection " + subsectionTemp.getTextContent().toString());
                        if (subsectionTemp.getTextContent().toString().equals(""))
                        {
                            tag.appendChild(para);
                            System.out.println("in subsection dinna" + subsectionTemp);
                        }
                        else
                        {
                            subsectionTemp.appendChild(para);
                        }
                        paragraphTemp = para;
                    }
                    else if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("II"))
                    {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        tag.appendChild(para);
                        paragraphTemp = para;
                    }                   
                    else
                    {
                        System.out.println("django else");
                        Element p = (Element)tag.getLastChild();
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        p.appendChild(para);
                        paragraphTemp = para;

                        if(tagAppend == true)
                        {
                            tag.appendChild(p);
                            tagAppend = false;
                        }
                    }
                }

            }
            else if(arAllText[m].trim().substring(0, 2).equals("SP"))
            {
                paragraphTemp.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
            }

            /*   else if(arAllText[m].trim().substring(0, 2).equals("II"))
            {
                Element p = (Element)tag.getLastChild();
                if(arAllText[m+1].trim().substring(0, 2).equals("IB"))
                {
                    Element bold = doc.createElement("B");

                    Element italic = doc.createElement("I");
                    italic.appendChild(doc.createTextNode(arAllText[m ]));
                    bold.appendChild(doc.createTextNode(arAllText[m+1]));
                    italic.appendChild(bold);
                    p.appendChild(italic);

                }
                else
                {
                    Element italic = doc.createElement("I");
                    italic.appendChild(doc.createTextNode(arAllText[m ]));

                    p.appendChild(italic);
                }

                if(tagAppend == true)
                {
                    tag.appendChild(p);
                    tagAppend = false;
                }

            }
            */
            else if(arAllText[m].trim().substring(0, 2).equals("BP"))
            {
                Element bold = doc.createElement("B");
                if(arAllText[m+1].trim().substring(0,2).equalsIgnoreCase("SB"))
                {
                    System.out.println("SB: "+arAllText[m+1]);
                    if(arAllText[m+2].trim().substring(0,2).equalsIgnoreCase("SB"))
                    {
                        System.out.println("SB2: "+arAllText[m+2]);
                        bold.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())+" "+arAllText[m+1].substring(3,arAllText[m+1].length())
                                +" "+arAllText[m+2].substring(3,arAllText[m+2].length())));
                    }
                    else
                    {
                        System.out.println("SB else: ");
                         bold.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())+" "+arAllText[m+1].substring(3,arAllText[m+1].length())));
                    }
                }
                else
                {
                    bold.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                }
                
                
                
         /*       if (subsectionTemp.getTextContent().toString().equals(""))
                        {
                             tag.appendChild(bold);                           
                            
                        }
                        else
                        {
                            subsectionTemp.appendChild(bold);
                        } */
                        boldTemp = bold;
                
                
                if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("II"))            
                {
                    italicTemp.appendChild(bold);
                }
                else
                {
                    if(paragraphTemp.getTextContent().equals(""))
                    {
                        Element paragraph = doc.createElement("P");
                        paragraph.appendChild(bold);
                        if (subsectionTemp.getTextContent().toString().equals(""))
                        {
                             tag.appendChild(paragraph);                            
                        }
                        else
                        {
                            subsectionTemp.appendChild(paragraph);
                        } 
                        paragraphTemp = paragraph;
                    }
                    else
                    {
                        paragraphTemp.appendChild(bold);
                    }
                    
                    System.out.println("in paragraph dinna" + paragraphTemp.getTextContent()+" tag: "+tag.toString()+" bold: "+bold.getTextContent());
                }
            }            

            else if(arAllText[m].trim().substring(0, 2).equals("SU"))
            {
                Element sup = doc.createElement("SUP");
                sup.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                paragraphTemp.appendChild(sup);

            }
              else if(arAllText[m].trim().substring(0, 2).equals("DT"))
            {
                tag.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));                
            }
            else if(arAllText[m].trim().substring(0, 2).equals("BR"))
            {
                Element br = doc.createElement("BR");
                paragraphTemp.appendChild(br);
                System.out.println("in BR dinna "+paragraphTemp.toString());

            }
            else if(arAllText[m].trim().substring(0, 2).equals("H1"))
            {
                if(noChild == true||headingTemp.getAttribute("LEVEL").equals("1"))
                {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("1");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);

                    subsectionTemp = subsection;
                    headingTemp = heading;

                    tag.appendChild(subsection);

                    noChild = false;
                }
                else
                {
                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("1");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    subsectionTemp2 = subsection;
                    headingTemp2 = heading;
                    subsectionTemp.appendChild(subsection);

                }
            }
            else if(arAllText[m].trim().substring(0, 2).equals("H2"))
            {
                if(noChild == true||headingTemp.getAttribute("LEVEL").equals("2"))
                {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("2");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);

                    subsectionTemp = subsection;
                    headingTemp = heading;

                    tag.appendChild(subsection);

                    noChild = false;
                }
                else
                {
                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("2");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);

                }
            }

            else if(arAllText[m].trim().substring(0, 2).equals("H3"))
            {
                if(noChild == true||headingTemp.getAttribute("LEVEL").equals("3"))
                {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("3");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    tag.appendChild(subsection);

                    subsectionTemp = subsection;
                    headingTemp = heading;

                    noChild = false;
                }
                else
                {
                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("3");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);

                }
            }
            else if(arAllText[m].trim().substring(0, 2).equals("H4"))
            {
                System.out.println("getAttr: 4 "+headingTemp.getAttribute("LEVEL").toString()+" "+noChild);
                if(noChild == true ||headingTemp.getAttribute("LEVEL").equals("4")||specialCase==true)   // so there is no heading next
                {
                    
                    System.out.println("getAttr: 4 ");
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("4");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);

                    subsectionTemp = subsection;
                    headingTemp = heading;

                    tag.appendChild(subsection);

                    noChild = false;
                }
                else
                {

                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("4");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);
                }
            }

            else if(arAllText[m].trim().substring(0, 2).equals("H5"))
            {
                System.out.println("getAttr: 5 "+headingTemp.getAttribute("LEVEL").toString());
                if(noChild == true||headingTemp.getAttribute("LEVEL").equals("5"))
                {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("5");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    subsectionTemp = subsection;
                    headingTemp = heading;

                    tag.appendChild(subsection);

                    noChild = false;
                }
                else
                {

                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("5");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);

                }
            }
            else if(arAllText[m].trim().substring(0, 2).equals("H6"))
            {

                if(noChild == true||headingTemp.getAttribute("LEVEL").equals("6"))
                {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("6");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);

                    headingTemp = heading;

                    subsectionTemp = subsection;
                    tag.appendChild(subsection);

                    noChild = false;
                }
                else
                {
                    Element subsection =doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("6");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);

                }
            }
            else if(arAllText[m].trim().substring(0, 2).equals("SH"))
            {
                System.out.println("in heading dinna!");
                if(arAllText[m].trim().contains("2"))
                {
                    Element sup = doc.createElement("SUP");
                    sup.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    headingTemp2.appendChild(sup);
                }
                else
                {
                    headingTemp2.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                }

            }

        }
        }

        try
        {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer;

            transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filepath));  
            transformer.transform(source, result);

            cleaner.deleteSpecialChars(filepath);
             JOptionPane.showMessageDialog(this, "The text was added successfully to your RevMan File","Clue", JOptionPane.WARNING_MESSAGE);  

        }
        
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error in adding the text: "+e.toString(),"ERROR", JOptionPane.ERROR_MESSAGE);  
        }
        
            btnAdd1.setEnabled(false);
        }
        
       
        
        
    }//GEN-LAST:event_btnAdd1MouseClicked

     private static Document getDocument(String file) 
    {
        try 
        {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(file);
        } 
        catch (Exception e) 
        {
            return null;
        }
    }
    
    public static void copyFile(File in, File out) throws IOException {     // copy the file for a backup
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        inChannel.transferTo(0, inChannel.size(), outChannel);
    }
    
    private void btnRefresh1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefresh1MouseClicked

        this.dispose();
        FrameProtocolToReview start = new FrameProtocolToReview(path);
        start.setVisible(true);
        start.validate();

    }//GEN-LAST:event_btnRefresh1MouseClicked

    private void btn_exit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_exit1MouseClicked
             int resultBeenden = JOptionPane.showConfirmDialog(this, "Do you really want to end the program?", "EXIT", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (resultBeenden==JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btn_exit1MouseClicked

    
      public void run()
    {
        try   
        {        
                    StringBuffer sbAllText = new StringBuffer();

                    pathTXT = System.getProperty("user.dir");
                                      

                   pathTXT = pathTXT  +"\\ProtocolToReview.txt";  //for final version!!!!
                    
               //     pathTXT = pathTXT +"\\src\\revmanhalcochranemode\\ProtocolToReview.txt"; 
                    
                    System.out.println("das ist pfad "+pathTXT);
                     Reader fr = new InputStreamReader(new FileInputStream(pathTXT), "UTF-8");
                    BufferedReader br = new BufferedReader(fr);

                    int counter = 0;
                    String newLine = br.readLine();

                    while(newLine!=null)
                    {
                        taText1.setText(taText1.getText()+newLine+"\n");
                        System.out.println("line: "+counter+" "+newLine+"\n");
                        counter = counter+1;
                        newLine = br.readLine();
                    }
                   
                    br.close();
                    
                    
                    taText1.setCaretPosition(0);
                    

             }
        
        catch(Exception e)
        {
            final JOptionPane pane = new JOptionPane("Error in reading the .txt file! Error message: "+e.toString());
             final JDialog d = pane.createDialog(null, "ERROR");
             d.setLocation(450, 430);
             d.setVisible(true);
        }
    
    }
        protected void processWindowEvent(WindowEvent e)             // for pressing the "x" in the top right corner
 {
        if(e.getID()==WindowEvent.WINDOW_CLOSING)
  {

  if(JOptionPane.showConfirmDialog(null, "<html><body>Do you really want to close the program?<body><html>"   
     , "WARNING",
     JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
   {
    super.processWindowEvent(e);
                                System.exit(0);
                        }
                }
    }
    
      
    
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnOpen1;
    private javax.swing.JButton btnRefresh1;
    private javax.swing.JButton btn_exit1;
    private javax.swing.JButton btn_return1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taText1;
    // End of variables declaration//GEN-END:variables
}
