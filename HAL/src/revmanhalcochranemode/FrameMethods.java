/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package revmanhalcochranemode;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.channels.FileChannel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;


/**
 *
 * @author msabs1
 */
public class FrameMethods extends javax.swing.JFrame {

    private String path;
    private Vector vAllReferences = new Vector();
    private Complex1 cleaner = new Complex1(null);
    private boolean noChild = true;
    private boolean tagAppend = false;
    private Element subsectionTemp;
    private Element paragraphTemp;
    private Element headingTemp;
    private Element headingTemp2;
    private Element italicTemp;
    private Element subsectionTemp2;
    
    private File openTextfile;
    
    private String pathTXT =""; 
    /**
     * Creates new form FrameMethods
     */
    public FrameMethods(String p) 
    {
        initComponents();
        path=p;
        this.setLocation(250, 250);
        this.run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_return = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taText = new javax.swing.JTextArea();
        btnOpen = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/hal.png"))); // NOI18N

        btn_return.setIcon(new javax.swing.ImageIcon(getClass().getResource("/revmanhalcochranemode/back.png"))); // NOI18N
        btn_return.setText("Back");
        btn_return.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_returnMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 33)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 249));
        jLabel2.setText("RevMan HAL ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Methods");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("<html><body>In this frame you are able to add the \"Methods\" to your RevMan file. You can see the added text in the text area below. If you want to change anything and save it afterwards, press the button \"Save to Text File\". Otherwise just press \"Add\" and the text will be added to the RevMan file without saving the changes.</body></html>");

        taText.setColumns(20);
        taText.setRows(5);
        jScrollPane1.setViewportView(taText);

        btnOpen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnOpen.setText("Open Textfile");
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenMouseClicked(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(jLabel1)))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_return)
                        .addGap(122, 122, 122)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 247, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOpen)
                        .addGap(69, 69, 69)
                        .addComponent(btnRefresh)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_return))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel4.getAccessibleContext().setAccessibleName("<html><body>In this frame you are able to add the \"Methods\" to your RevMan file. You can see the added text in the text area below. <p></p>  If you want to change anything and save it afterwards, press the button \"Save to Text File\". Otherwise just press \"Add\" and the text will be added to the RevMan file without saving the changes.</body></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_returnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_returnMouseClicked
        // TODO add your handling code here:
           this.dispose();
        FrameProtocol frame = new FrameProtocol(path);
        frame.setVisible(true);
        frame.validate();
      
        
    }//GEN-LAST:event_btn_returnMouseClicked

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        
         SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
         Date currentTime = new Date();
        
        
        String filepath = path;            // REVMAN FILE
        Document doc = getDocument(filepath);     
        
        

        String[] arAllText = taText.getText().toString().split("\n");
        
        Node tag = null;        
        Node one = doc.getElementsByTagName("CRIT_OUTCOMES_PRIMARY").item(0);
        Node two = doc.getElementsByTagName("CRIT_OUTCOMES_SECONDARY").item(0);
        boolean secondSubsection;

        System.out.println("in add, vor for");
        
        for (int m = 0; m <arAllText.length ; m++) 
        {         
            secondSubsection = false;
            
            if(arAllText[m].trim().isEmpty())
            {
        
            }
            else
            {
            
        System.out.println("text, array: "+m +" "+ arAllText[m]);    
        try
        {
        System.out.println("sub: "+arAllText[m].trim().substring(4,arAllText[m].length()-4).trim());
        }
        catch(Exception e)
        {
        
        }
//           System.out.println("sub: "+arAllText[m].trim().substring(4,arAllText[m].length()-4).trim());
           
        System.out.println(m+ " after the catch");
        
        if(arAllText[m].trim().length()>8)
        {
        
            if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Background") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Background") )
            {
                System.out.println("in background!");
                 tag= doc.getElementsByTagName("BACKGROUND").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
                tagAppend = true;
                try
                {
                    Element child = (Element)tag.getLastChild();
                }
                catch(Exception e)
                {
                  noChild = true;
                }
                
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
                
                
            }     
              
                
                
                
          //      paragraph = doc.createElement("P");   // ADD TEXT (TEXT CAN ONLY BE ADDED IN P; MARKER IS PART OF PARAGRAPG3; PARAGRAPH3 IS PART OF INTERVENTION; INTERVENTION IS MAIN NODE)    
         //       Element marker = doc.createElement("MARKER");   // MARKER IS NEEDED TO ADD TEXT)
           //     marker.appendChild(doc.createTextNode("*------ Start of HAL generated text " + formatter.format(currentTime) + " ------* "));
          //      paragraph.appendChild(marker);
          //      tag.appendChild(paragraph);
                
             
            
            
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Description of the condition") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Description of the condition"))
            {
                
                tag= doc.getElementsByTagName("CONDITION").item(0);  //SEARCH THE DOCUMENT FOR THE TAG NAME
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               
            }
           
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Description of the intervention") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Description of the intervention"))
            {
                 tag = doc.getElementsByTagName("INTERVENTION").item(0); 
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("How the intervention might work") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("How the intervention might work"))
            {
                    tag = doc.getElementsByTagName("THEORY").item(0); 
                    tagAppend = true;
                    subsectionTemp = doc.createElement("SUBSECTION");
                    subsectionTemp2 = doc.createElement("SUBSECTION");
                    paragraphTemp = doc.createElement("PARAGRAPH");
                    headingTemp = doc.createElement("HEADING");
                    headingTemp2 = doc.createElement("HEADING");
                    italicTemp = doc.createElement("ITALIC");
            }
              
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Why it is important to do this review") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Why it is important to do this review"))
            {
                tag = doc.getElementsByTagName("IMPORTANCE").item(0); 
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Objectives") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Objectives"))
            {
                tag = doc.getElementsByTagName("OBJECTIVES").item(0);   //SEE EXAMPLE...
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }            
         
            
           
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of studies") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of studies"))
            {
                tag = doc.getElementsByTagName("CRIT_STUDIES").item(0);   //All relevant randomised...
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            
            else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of participants") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of participants"))
            {
                
                tag = doc.getElementsByTagName("CRIT_PARTICIPANTS").item(0);   //Adults, however
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of interventions") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of interventions"))
            {
                
                tag = doc.getElementsByTagName("CRIT_INTERVENTIONS").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }     
            
            
          else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of outcome measures") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Types of outcome measures"))
            {
                 
                 tag = doc.getElementsByTagName("CRIT_OUTCOMES").item(0);   //All outcomes will...                 
                 tag.removeChild(one);
                 tag.removeChild(two);
                 tagAppend = true;
                 subsectionTemp = doc.createElement("SUBSECTION");
                 subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
                
            }
             else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Primary outcomes") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Primary outcomes"))
            {
                
                tag.appendChild(one);
                tag.appendChild(two);
                tag = doc.getElementsByTagName("CRIT_OUTCOMES_PRIMARY").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
             else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Secondary outcomes") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Secondary outcomes"))
            {
                
                tag = doc.getElementsByTagName("CRIT_OUTCOMES_SECONDARY").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
                    
            
           if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Electronic searches") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Electronic searches"))
            {
                tag = doc.getElementsByTagName("ELECTRONIC_SEARCHES").item(0);   //LEAVE BLANK FOR..
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Searching other resources") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Searching other resources"))
            {
                
                tag = doc.getElementsByTagName("OTHER_SEARCHES").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            
            
            else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Data collection and analysis"))// MUST BE COMPLETED..
            {
                System.out.println("IN DATA COLLECTION");
                
                tag = doc.getElementsByTagName("STUDY_SELECTION").item(0);
               tagAppend = true;
               subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }
            else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Data extraction and management") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Data extraction and management"))// MUST BE COMPLETED..
            {
                System.out.println ("Data extraction: "+arAllText[m+1]);
                tag = doc.getElementsByTagName("DATA_EXTRACTION").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               

            } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of risk of bias in included studies") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of risk of bias in included studies"))// Assessment of risk...
            {

                tag = doc.getElementsByTagName("QUALITY_ASSESSMENT").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               

            } 
            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Measures of treatment effect") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Measures of treatment effect"))// measures of treatment...
            {

                tag = doc.getElementsByTagName("EFFECT_MEASURES").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            } 
            else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Unit of analysis issues") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Unit of analysis issues"))// unit of analsis...
            {

                tag = doc.getElementsByTagName("UNIT_OF_ANALYSIS").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");

            } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Dealing with missing data") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Dealing with missing data"))// dealing with missing data...
            {

                tag = doc.getElementsByTagName("MISSING_DATA").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               
            } else if (arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of heterogeneity") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of heterogeneity"))// assessment of heterogeneity...
            {

                tag = doc.getElementsByTagName("HETEROGENEITY_ASSESSMENT").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
                
            } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Acknowledgements") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Acknowledgements"))// MUST BE COMPLETED..
            {
                tag = doc.getElementsByTagName("ACKNOWLEDGEMENTS").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               
            } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Contributions of authors") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Contributions of authors"))// MUST BE COMPLETED..
            {
               tag = doc.getElementsByTagName("CONTRIBUTIONS").item(0);
               tagAppend = true;
               subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
               
            } else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Declarations of interest") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Declarations of interest"))// MUST BE COMPLETED..
            {
                tag = doc.getElementsByTagName("CONFLICT_OF_INTEREST").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }


            // .. bennys code end


            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of reporting biases") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Assessment of reporting biases"))
            {

                tag = doc.getElementsByTagName("BIAS_ASSESSMENT").item(0);
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }

            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Data synthesis") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Data synthesis"))
            {
                tag = doc.getElementsByTagName("DATA_SYNTHESIS").item(0);   //We understand that...
                tagAppend = true;
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");
            }


            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Subgroup analysis and investigation of heterogeneity") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Subgroup analysis and investigation of heterogeneity"))
            {
                    
                if(arAllText[m].trim().substring(0,2).equals("--"))
                {
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");        
                tag = doc.getElementsByTagName("SUBGROUP_ANALYSIS").item(0);
                tagAppend = true;  
                }
            }

            else if(arAllText[m].trim().substring(4,arAllText[m].length()-4).trim().equalsIgnoreCase("Sensitivity analysis") 
                    ||arAllText[m].trim().substring(5,arAllText[m].length()-4).trim().equalsIgnoreCase("Sensitivity analysis"))
            {
                subsectionTemp = doc.createElement("SUBSECTION");
                subsectionTemp2 = doc.createElement("SUBSECTION");
                paragraphTemp = doc.createElement("PARAGRAPH");
                headingTemp = doc.createElement("HEADING");
                headingTemp2 = doc.createElement("HEADING");
                italicTemp = doc.createElement("ITALIC");

                tag = doc.getElementsByTagName("SENSITIVITY_ANALYSIS").item(0);
                tagAppend = true;
             

            }

        }
        
               try
                {
                    Element child = (Element)tag.getLastChild();
                    if(child.getTextContent().toString().equals(""))
                    {
                        noChild = true;
                    }
                }
                catch(Exception e)
                {
                  noChild = true;
                }
               
        
               System.out.println("This is tag: "+tag.toString() + " "+m +" sub: "+arAllText[m].trim().substring(0,2));
  
            
            if (arAllText[m].trim().length()>3&&arAllText[m].trim().substring(0,3).equalsIgnoreCase("RT:"))
            {
                
                String author="";
                String type ="";
                boolean checkIdentifier = false;
                  tag = doc.getElementsByTagName("ADDITIONAL_REFERENCES").item(0);
                Element reference = doc.createElement("REFERENCE");
                
                
                tag.appendChild(reference);
                 
                for(int p=3;p<arAllText[m+1].length();p++)
                    {
                        if(arAllText[m+1].substring(p,p+1).equals(" "))
                        {
                            break;
                        }
                        else
                        {
                            author=author+arAllText[m+1].substring(p,p+1);
                        }
                    }
               
                
                int year =0;
                if(arAllText[m+3].substring(3,4).equals("1") || arAllText[m+3].substring(3,4).equals("2"))
                {
                    year = 3;
                }
                else if(arAllText[m+4].substring(3,4).equals("1") || arAllText[m+4].substring(3,4).equals("2"))
                {
                    year =4;                    
                }
                else
                {
                    year = 5;
                }
               System.out.println("this is the year: "+year + " "+ arAllText[m+3]);
                
                String stReference="REF-"+author+"-"+arAllText[m+year].substring(3,7);
                String stName = author+" "+arAllText[m+year].substring(3,7);
                
                
                for(int w = 0;w<vAllReferences.size();w++)   
                {
                     if(vAllReferences.elementAt(w).toString().equals(stReference))
                     {
                         stReference= stReference+"a";
                         stName = stName+"a";
                     }
                }
                
                System.out.println("stName: "+stName+" st Ref: "+stReference);
                
                     Attr attr = doc.createAttribute("ID");
                     attr.setValue(stReference);
                     reference.setAttributeNode(attr);
                     
                     vAllReferences.addElement("REF-"+author+"-"+arAllText[m+year].substring(3,7));
                     
                     Attr attr2 = doc.createAttribute("NAME");
                     attr2.setValue(stName);
                     reference.setAttributeNode(attr2);
                     
                     Attr attr3 = doc.createAttribute("TYPE");
                     if(arAllText[m].substring(3,arAllText[m].length()).equalsIgnoreCase("Conference proceedings"))
                     {
                         type = "CONFERENCE_PROC";
                     }
                     else if(arAllText[m].substring(3,arAllText[m].length()).equalsIgnoreCase("Journal article"))
                     {
                         type = "JOURNAL_ARTICLE";
                     }
                     else if(arAllText[m].substring(3,arAllText[m].length()).equalsIgnoreCase("Section of Book")||arAllText[m].substring(3,arAllText[m].length()).equalsIgnoreCase("Book"))
                     {
                         type = "BOOK_SECTION";
                     }
                      else if(arAllText[m].substring(3,arAllText[m].length()).equalsIgnoreCase("Other"))
                     {
                         type = "OTHER";
                     }                     
                     
                     attr3.setValue(type);
                     reference.setAttributeNode(attr3);
                
                for(int o=m+1;o<arAllText.length;o++)
                {
                     if(arAllText[o].equals("")||o==arAllText.length-1)
                       {
                           
                           if(checkIdentifier==true)
                           {
                               
                           }
                           else
                           {
                               Element identifier = doc.createElement("IDENTIFIERS");
                               reference.appendChild(identifier);
                               System.out.println("in else identifiers");
                           }
                           System.out.println("in break dinna");
                           m = o;
                           break;
                        }
                    
                      if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("AU:"))
                      {
                          Element au = doc.createElement("AU");
                          au.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(au);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("TI:"))
                      {
                          Element ti = doc.createElement("TI");
                          ti.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(ti);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("TO:"))
                      {
                          Element to = doc.createElement("TO");
                          to.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(to);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("SO:"))
                      {
                          Element so = doc.createElement("SO");
                          so.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(so);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("YR:"))
                      {
                          Element yr = doc.createElement("YR");
                          yr.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(yr);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("PB:"))
                      {
                          Element pb = doc.createElement("PB");
                          pb.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(pb);
                      }
                       else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("CY:"))
                      {
                          Element cy = doc.createElement("CY");
                          cy.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(cy);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("VL:"))
                      {
                          Element vl = doc.createElement("VL");
                          vl.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(vl);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("NO:"))
                      {
                          Element no = doc.createElement("NO");
                          no.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(no);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("PG:"))
                      {
                          Element pg = doc.createElement("PG");
                          pg.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(pg);
                      }
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("ED:"))
                      {
                          Element ed = doc.createElement("ED");
                          ed.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(ed);
                      }
                       else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("MD:"))
                      {
                          Element md = doc.createElement("MD");
                          md.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(md);
                      }
                         else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("EN:"))
                      {
                          Element en = doc.createElement("EN");
                          en.appendChild(doc.createTextNode(arAllText[o].trim().substring(3,arAllText[o].length())));
                          reference.appendChild(en);
                      }
                    
                    
                      else if(arAllText[o].trim().substring(0,3).equalsIgnoreCase("ID:"))
                      {
                          Element identifiers = doc.createElement("IDENTIFIERS");
                          
                          Element identifier = doc.createElement("IDENTIFIER");
                          String typeID="";
                          
                          Attr attr4 = doc.createAttribute("TYPE");
                          Attr attr5 = doc.createAttribute("VALUE");                          
                          for (int p = 3; p < arAllText[o].length(); p++) 
                          {
                              if (arAllText[o].substring(p, p + 1).equals(" ")) 
                              {
                                  break;
                              } 
                              else 
                              {
                                  typeID = typeID + arAllText[o].substring(p, p + 1);
                              }
                          }
                          System.out.println("typeID: "+typeID);
                          
                          attr4.setValue(typeID);
                          attr5.setValue(arAllText[o].substring(typeID.length()+4, arAllText[o].length()));
                          identifier.setAttributeNode(attr4);
                          identifier.setAttributeNode(attr5);
                          identifiers.appendChild(identifier);
                          reference.appendChild(identifiers);
                          
                          checkIdentifier=true;
                      }
                   
                } 
            } 
             else if(arAllText[m].trim().substring(0, 2).equals("LR"))
                {
                    Element link = doc.createElement("LINK");
                    Attr attrLink1 = doc.createAttribute("REF");
                    Attr attrLink2 = doc.createAttribute("TYPE");
                    String stAttrLink1 = arAllText[m].substring(3,arAllText[m].length()).replaceAll(" ", "-");
                    attrLink1.setValue("REF-" + stAttrLink1);
                    attrLink2.setValue("REFERENCE");
                    link.setAttributeNode(attrLink1);
                    link.setAttributeNode(attrLink2);
                    link.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    paragraphTemp.appendChild(link);                   
                }
             else if(arAllText[m].trim().substring(0, 2).equals("LI"))
                {
                    Element link3 = doc.createElement("A");
                    Attr attrLink4 = doc.createAttribute("HREF");              
                    attrLink4.setValue(arAllText[m].substring(arAllText[m].toString().indexOf(":")+1,arAllText[m].toString().length()).trim());         
                    link3.setAttributeNode(attrLink4);
                    link3.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].toString().indexOf(":"))));
                    paragraphTemp.appendChild(link3);                 
                }
              
              else if(arAllText[m].trim().substring(0, 2).equals("!!"))
                {
                    Element link = doc.createElement("LINK");
                    Attr attrLink5 = doc.createAttribute("TAG");
                    Attr attrLink6 = doc.createAttribute("TYPE");
                    attrLink5.setValue("SUBGROUP_ANALYSIS");
                    attrLink6.setValue("SECTION");
                    link.setAttributeNode(attrLink5);
                    link.setAttributeNode(attrLink6);
                
                    link.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    paragraphTemp.appendChild(link);                    
                }
              else  if(arAllText[m].trim().substring(0, 2).equals("II"))
                {
                    Element italic = doc.createElement("I");
                    italic.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length())));
                    italicTemp = italic;
                    paragraphTemp.appendChild(italic);                      
                }
              else  if(arAllText[m].trim().substring(0, 2).equals("PP"))
                {   
                    if(noChild == true)
                    {                     
                    Element para = doc.createElement("P");
                    para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    tag.appendChild(para);
                    
                    paragraphTemp = para;
                    noChild = false;
                    }
                    else
                    {
                         
                        try
                        {
                        int temp = Integer.parseInt(headingTemp.getAttribute("LEVEL"));
                        int temp2 =Integer.parseInt(headingTemp2.getAttribute("LEVEL"));
                        
                        System.out.println("levels subs: "+ temp +" "+temp2);
                        
                        if(temp2>temp)
                        {
                        secondSubsection = true;
                        }
                        
                        }
                        catch(Exception e)
                        {
                            secondSubsection = false;
                        }
                    if(secondSubsection==true)
                    {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        subsectionTemp2.appendChild(para);
                        paragraphTemp = para;
                    }
                    else if(arAllText[m-1].trim().substring(0, 1).equalsIgnoreCase("H"))
                    {                       
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        subsectionTemp.appendChild(para);
                        paragraphTemp = para;
                    }
                    else if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("PP"))
                    {                        
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        
                        System.out.println("subsection " + subsectionTemp.getTextContent().toString());
                        if (subsectionTemp.getTextContent().toString().equals(""))
                        {
                            tag.appendChild(para);
                            System.out.println("in subsection dinna" + subsectionTemp);
                        }
                        else
                        {
                        subsectionTemp.appendChild(para);
                        }
                        paragraphTemp = para;
                    }
                    else if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("II"))
                    {
                        Element para = doc.createElement("P");
                        para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                        tag.appendChild(para);
                        paragraphTemp = para;
                    }
                    else
                    {
                        System.out.println("django else");
                    Element p = (Element)tag.getLastChild();
                    Element para = doc.createElement("P");
                    para.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    p.appendChild(para);
                    paragraphTemp = para;
                    
                       if(tagAppend == true)
                    {
                        tag.appendChild(p);
                        tagAppend = false;
                    }
                    }
                    }
                    
                }
              else if(arAllText[m].trim().substring(0, 2).equals("SP"))
                {   
                    paragraphTemp.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));                    
                }
                 
         /*   else if(arAllText[m].trim().substring(0, 2).equals("II"))
                {
                    Element p = (Element)tag.getLastChild();
                     if(arAllText[m+1].trim().substring(0, 2).equals("IB"))
                     {
                         Element bold = doc.createElement("B");
                          
                    Element italic = doc.createElement("I");
                    italic.appendChild(doc.createTextNode(arAllText[m ]));
                    bold.appendChild(doc.createTextNode(arAllText[m+1]));
                     italic.appendChild(bold);
                    p.appendChild(italic);
                  
                     }
                     else
                     {                         
                    Element italic = doc.createElement("I");
                    italic.appendChild(doc.createTextNode(arAllText[m ]));
                    
                    p.appendChild(italic);
                     }
                   
                    if(tagAppend == true)
                    {
                        tag.appendChild(p);
                        tagAppend = false;
                    }
                    
                }
           */
               else if(arAllText[m].trim().substring(0, 2).equals("BP"))
                {
                     Element bold = doc.createElement("B");                     
                    bold.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    if(arAllText[m-1].trim().substring(0, 2).equalsIgnoreCase("II"))
                    {
                    italicTemp.appendChild(bold);
                    }
                    else
                    {
                    paragraphTemp.appendChild(bold); 
                    }
                  }
               
                else if(arAllText[m].trim().substring(0, 2).equals("SU"))
                  {
                    Element sup = doc.createElement("SUP");
                    sup.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    paragraphTemp.appendChild(sup);
                    
                    
                                   
                  }
                else if(arAllText[m].trim().substring(0, 2).equals("BR"))
                  {
                    Element br = doc.createElement("BR");
                    paragraphTemp.appendChild(br);      
                    System.out.println("in BR dinna "+paragraphTemp.toString());
          
                  }
                else if(arAllText[m].trim().substring(0, 2).equals("H1"))
                  {
                     if(noChild == true||headingTemp.getAttribute("LEVEL").equals("1"))
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("1");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    
                    subsectionTemp = subsection; 
                    headingTemp = heading;
                    
                    tag.appendChild(subsection);
                    
                    noChild = false;
                    }
                    else
                    {
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("1");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    subsectionTemp2 = subsection;
                    headingTemp2 = heading;
                    subsectionTemp.appendChild(subsection);                
                    
                  }
                  }
                 else if(arAllText[m].trim().substring(0, 2).equals("H2"))
                  {
                     if(noChild == true||headingTemp.getAttribute("LEVEL").equals("2"))
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("2");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    
                    subsectionTemp = subsection;  
                    headingTemp = heading;
                    
                    tag.appendChild(subsection);
                    
                    noChild = false;
                    }
                    else
                    {
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("2");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);                
                    
                  }
                  }
                  
                  else if(arAllText[m].trim().substring(0, 2).equals("H3"))
                  {
                     if(noChild == true||headingTemp.getAttribute("LEVEL").equals("3"))
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("3");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    tag.appendChild(subsection);
                    
                    subsectionTemp = subsection; 
                    headingTemp = heading;
                    
                    noChild = false;
                    }
                    else
                    {   
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("3");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                   subsectionTemp.appendChild(subsection);                
                    
                  }
                  }
                   else if(arAllText[m].trim().substring(0, 2).equals("H4"))
                  {
                      System.out.println("getAttr: 4 "+headingTemp.getAttribute("LEVEL").toString());
                     if(noChild == true ||headingTemp.getAttribute("LEVEL").equals("4"))   // so there is no heading next
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("4");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    
                    subsectionTemp = subsection;
                    headingTemp = heading;
                                        
                    tag.appendChild(subsection);
                    
                    noChild = false;
                    }            
                     else
                    {                       
                    
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                     heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("4");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);                
                     }
                  }
                  
                    else if(arAllText[m].trim().substring(0, 2).equals("H5"))
                  {
                      System.out.println("getAttr: 5 "+headingTemp.getAttribute("LEVEL").toString());
                      if(noChild == true||headingTemp.getAttribute("LEVEL").equals("5"))
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("5");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    subsectionTemp = subsection;
                    headingTemp = heading;
                    
                    tag.appendChild(subsection);
                    
                    noChild = false;
                    }
                    else
                    {
                      
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("5");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);                
                    
                  }
                  }
                     else if(arAllText[m].trim().substring(0, 2).equals("H6"))
                  {
                                           
                     if(noChild == true||headingTemp.getAttribute("LEVEL").equals("6"))
                    {
                    Element subsection = doc.createElement("SUBSECTION");
                    Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("6");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    
                    headingTemp = heading;
                    
                    subsectionTemp = subsection;
                    tag.appendChild(subsection);
                    
                    noChild = false;
                    }
                    else
                    {
                     Element subsection =doc.createElement("SUBSECTION");
                     Element heading = doc.createElement("HEADING");
                    heading.appendChild(doc.createTextNode(arAllText[m].substring(2,arAllText[m].length()))); 

                    Attr attr = doc.createAttribute("LEVEL");
                    attr.setValue("6");
                    heading.setAttributeNode(attr);
                    subsection.appendChild(heading);
                    headingTemp2 = heading;
                    subsectionTemp2 = subsection;
                    subsectionTemp.appendChild(subsection);                
                    
                  }
                  }
                else if(arAllText[m].trim().substring(0, 2).equals("SH"))
                {              
                    System.out.println("in heading dinna!");
                    if(arAllText[m].trim().contains("2"))
                    {
                    Element sup = doc.createElement("SUP");
                    sup.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));
                    headingTemp2.appendChild(sup);             
                    }
                    else
                    {
                     headingTemp2.appendChild(doc.createTextNode(arAllText[m].substring(3,arAllText[m].length())));  
                    }
                    
                }
            
        }
        }
           
             try 
             {
                  TransformerFactory transformerFactory = TransformerFactory.newInstance();
                 Transformer transformer;

                 transformer = transformerFactory.newTransformer();
                 DOMSource source = new DOMSource(doc);
                 StreamResult result = new StreamResult(new File(filepath));   // THE SOLUTION FOR UMLAUTS????!?!?!
                 transformer.transform(source, result);
                 
                 cleaner.deleteSpecialChars(filepath);
                 
             } 
             catch (Exception e) 
             {
                 
             }
           
           
            
            
            
            

        

    }//GEN-LAST:event_btnAddMouseClicked

    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseClicked
        
    
        
        File openTXT = new File(pathTXT);

        Desktop openTXT2 = null;
        if (Desktop.isDesktopSupported()) {
            openTXT2 = Desktop.getDesktop();
        }
        try {
            openTXT2.open(openTXT);
        } catch (Exception e) {
        }

     
    }//GEN-LAST:event_btnOpenMouseClicked

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
       
        this.dispose();
        FrameMethods start = new FrameMethods(path);
        start.setVisible(true);
        start.validate();
   
    }//GEN-LAST:event_btnRefreshMouseClicked

    public void run()
    {
     
        
        try   
        {           

                    StringBuffer sbAllText = new StringBuffer();

                    pathTXT = System.getProperty("user.dir");
                                      

                  //  pathCSV = pathCSV +"\\drugDataNewCSVWithSpace.csv";  //for final version!!!!
                    
                    pathTXT = pathTXT +"\\src\\revmanhalcochranemode\\MethodsText.txt"; 
                    
                    System.out.println("das ist pfad "+pathTXT);
                     Reader fr = new InputStreamReader(new FileInputStream(pathTXT), "UTF-8");
                    BufferedReader br = new BufferedReader(fr);

                    int counter = 0;
                    String newLine = br.readLine();

                    while(newLine!=null)
                    {
                        taText.setText(taText.getText()+newLine+"\n");
                        System.out.println("line: "+counter+" "+newLine+"\n");
                        counter = counter+1;
                        newLine = br.readLine();
                    }
                   
                    br.close();
                    
                    
                    taText.setCaretPosition(0);
                    

             }
        
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    private static Document getDocument(String file) 
    {
        try 
        {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(file);
        } 
        catch (Exception e) 
        {
            return null;
        }
    }
    
    public static void copyFile(File in, File out) throws IOException {     // copy the file for a backup
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        inChannel.transferTo(0, inChannel.size(), outChannel);
    }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btn_return;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taText;
    // End of variables declaration//GEN-END:variables
}
